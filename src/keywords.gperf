%{
#include "token.h"
%}
struct keyword_token { const char* name; TokenKind kind; };
%%
abort, TOKEN_ABORT
declare, TOKEN_DECLARE
generic, TOKEN_GENERIC
of, TOKEN_OF
select, TOKEN_SELECT
abs, TOKEN_ABS
delay, TOKEN_DELAY
goto, TOKEN_GOTO
or, TOKEN_OR
separate, TOKEN_SEPARATE
accept, TOKEN_ACCEPT
delta, TOKEN_DELTA
others, TOKEN_OTHERS
subtype, TOKEN_SUBTYPE
access, TOKEN_ACCESS
digits, TOKEN_DIGITS
if, TOKEN_IF
out, TOKEN_OUT
all, TOKEN_ALL
do, TOKEN_DO
in, TOKEN_IN
task, TOKEN_TASK
and, TOKEN_AND
is, TOKEN_IS
package, TOKEN_PACKAGE
terminate, TOKEN_TERMINATE
array, TOKEN_ARRAY
pragma, TOKEN_PRAGMA
then, TOKEN_THEN
at, TOKEN_AT
else, TOKEN_ELSE
private, TOKEN_PRIVATE
type, TOKEN_TYPE
elsif, TOKEN_ELSIF
limited, TOKEN_LIMITED
procedure, TOKEN_PROCEDURE
end, TOKEN_END
loop, TOKEN_LOOP
begin, TOKEN_BEGIN
entry, TOKEN_ENTRY
raise, TOKEN_RAISE
use, TOKEN_USE
body, TOKEN_BODY
exception, TOKEN_EXCEPTION
range, TOKEN_RANGE
exit, TOKEN_EXIT
mod, TOKEN_MOD
record, TOKEN_RECORD
when, TOKEN_WHEN
rem, TOKEN_REM
while, TOKEN_WHILE
new, TOKEN_NEW
renames, TOKEN_RENAMES
with, TOKEN_WITH
case, TOKEN_CASE
for, TOKEN_FOR
not, TOKEN_NOT
return, TOKEN_RETURN
constant, TOKEN_CONSTANT
function, TOKEN_FUNCTION
null, TOKEN_NULL
reverse, TOKEN_REVERSE
xor, TOKEN_XOR
