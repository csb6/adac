-- C45504A.ADA

-- OBJECTIVE:
--      CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR IS RAISED WHEN A
--      PRODUCT LIES OUTSIDE THE RANGE OF THE BASE TYPE, IF THE
--      OPERANDS ARE OF PREDEFINED TYPE INTEGER.

-- HISTORY:
--      RJW 09/01/86  CREATED ORIGINAL TEST.
--      JET 12/30/87  UPDATED HEADER FORMAT AND ADDED CODE TO
--                    PREVENT OPTIMIZATION.

WITH REPORT; USE REPORT;
PROCEDURE C45504A IS

     F : INTEGER := IDENT_INT (INTEGER'FIRST);
     L : INTEGER := IDENT_INT (INTEGER'LAST);

BEGIN
     TEST ( "C45504A", "CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR " &
                       "IS RAISED WHEN A PRODUCT LIES OUTSIDE THE " &
                       "RANGE OF THE BASE TYPE, IF THE OPERANDS ARE " &
                       "OF PREDEFINED TYPE INTEGER" );

     BEGIN
          IF EQUAL (F*L,-100) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'F * L' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'F * L' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'F * L'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'F * L'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'F * L'" );
     END;

     BEGIN
          IF EQUAL (F*F,100) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'F * F' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'F * F' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'F * F'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'F * F'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'F * F'" );
     END;

     BEGIN
          IF EQUAL (L*L,100) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'L * L' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'L * L' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'L * L'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'L * L'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'L * L'" );
     END;

     RESULT;
END C45504A;
