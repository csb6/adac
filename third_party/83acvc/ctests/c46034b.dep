-- C46034B.DEP

-- OBJECTIVE:
--     CHECK THAT NUMERIC/CONSTRAINT_ERROR IS RAISED IF THE RESULT OF
--     A CONVERSION TO A FIXED POINT TYPE LIES OUTSIDE THE RANGE OF
--     THE TARGET TYPE'S BASE TYPE AND THAT CONSTRAINT_ERROR IS RAISED
--     IF THE RESULT OF THE CONVERSION IS OUTSIDE THE RANGE OF THE
--     SUBTYPE BUT WITHIN THE RANGE OF THE BASE TYPE, WHEN 'SMALL OF THE
--     FIXED POINT TYPE IS NOT A POWER OF TWO.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS THAT SUPPORT
--     A VALUE OF 'SMALL NOT EQUAL TO A POWER OF TWO FOR FIXED POINT
--     TYPES.

--     IF SUCH A VALUE FOR 'SMALL IS NOT SUPPORTED, THEN THE
--     REPRESENTATION CLAUSE FOR "FIX1" MUST BE REJECTED.

-- HISTORY:
--     JET 07/12/88  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;

PROCEDURE C46034B IS

     TYPE FIX1 IS DELTA 2#0.1# RANGE -16#20.0# .. 16#20.0#;
     FOR FIX1'SMALL USE 2#0.011#;               -- N/A => ERROR.
     TYPE FIX2 IS DELTA 2#0.001# RANGE -16#80.0# .. 16#80.0#;
     FOR FIX2'SMALL USE 2#0.00011#;
     TYPE FIX3 IS DELTA 2#0.00001# RANGE -16#200.0# .. 16#200.0#;
     FOR FIX3'SMALL USE 2#0.0000011#;

     F1 : FIX1;
     F2 : FIX2;
     F3 : FIX3;

     SUBTYPE SUB1 IS FIX1 RANGE -16#10.0# .. 16#10.0#;
     SUBTYPE SUB2 IS FIX2 RANGE -16#40.0# .. 16#40.0#;
     SUBTYPE SUB3 IS FIX3 RANGE -16#100.0# .. 16#100.0#;

     GENERIC
          TYPE F IS DELTA <>;
     FUNCTION IDENT_G (X : F) RETURN F;

     FUNCTION IDENT_G (X : F) RETURN F IS
     BEGIN
          RETURN X + F(IDENT_INT(0));
     END IDENT_G;

     FUNCTION IDENT IS NEW IDENT_G(FIX1);
     FUNCTION IDENT IS NEW IDENT_G(FIX2);
     FUNCTION IDENT IS NEW IDENT_G(FIX3);

BEGIN
     TEST ("C46034B", "CHECK THAT NUMERIC/CONSTRAINT_ERROR IS " &
                      "RAISED IF THE RESULT OF A CONVERSION TO A " &
                      "FIXED POINT TYPE LIES OUTSIDE THE RANGE OF " &
                      "THE TARGET TYPE'S BASE TYPE AND THAT " &
                      "CONSTRAINT_ERROR IS RAISED IF THE RESULT OF " &
                      "THE CONVERSION IS OUTSIDE THE RANGE OF THE " &
                      "SUBTYPE BUT WITHIN THE RANGE OF THE BASE " &
                      "TYPE, WHEN 'SMALL OF THE FIXED POINT TYPE " &
                      "IS NOT A POWER OF TWO");

     BEGIN
          F1 := FIX1(FIX1'SAFE_LARGE ** 2);
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX1 BASE TYPE");
          IF F1 /= IDENT(F1) THEN
               COMMENT("DON'T OPTIMIZE F1");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR | NUMERIC_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX1 BASE TYPE");
     END;

     BEGIN
          F2 := FIX2(FIX2'SAFE_LARGE ** IDENT_INT(2));
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX2 BASE TYPE");
          IF F2 /= IDENT(F2) THEN
               COMMENT("DON'T OPTIMIZE F2");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR | NUMERIC_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX2 BASE TYPE");
     END;

     BEGIN
          F3 := FIX3(-(FIX3'SAFE_LARGE ** 2));
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX3 BASE TYPE");
          IF F3 /= IDENT(F3) THEN
               COMMENT("DON'T OPTIMIZE F3");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR | NUMERIC_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX3 BASE TYPE");
     END;

     BEGIN
          F1 := SUB1(FIX1'LARGE);
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX1 SUBTYPE");
          IF F1 /= IDENT(F1) THEN
               COMMENT("DON'T OPTIMIZE F1");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX1 SUBTYPE");
     END;

     BEGIN
          F2 := SUB2(FIX2'LARGE);
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX2 SUBTYPE");
          IF F2 /= IDENT(F2) THEN
               COMMENT("DON'T OPTIMIZE F2");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX2 SUBTYPE");
     END;

     BEGIN
          F3 := SUB3(FIX3'LARGE);
          FAILED ("NO EXCEPTION RAISED OUTSIDE FIX3 SUBTYPE");
          IF F3 /= IDENT(F3) THEN
               COMMENT("DON'T OPTIMIZE F3");
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION OUTSIDE FIX3 SUBTYPE");
     END;

     RESULT;
END C46034B;
