-- CD2A84O.DEP

-- OBJECTIVE:
--     CHECK THAT IF SIZE AND COLLECTION SIZE SPECIFICATIONS
--     ARE GIVEN FOR AN ACCESS TYPE AND THE SIZE IS SPECIFIED
--     AS THE SMALLEST APPROPRIATE SIZE FOR A SIGNED SIZE
--     REPRESENTATION, THEN THE STORAGE_ERROR EXCEPTION IS RAISED
--     WHEN THE ALLOCATED SPACE EXCEEDS THE SPECIFIED COLLECTION SIZE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS THAT SUPPORT
--     8 BIT ACCESS VALUES WHEN A STORAGE_SIZE SPECIFICATION IS NO
--     GREATER THAN 256 STORAGE_UNITS.

--     IF SUCH SIZE CLAUSES FOR ACCESS TYPES ARE NOT SUPPORTED,
--     THEN THE SIZE CLAUSE FOR "CHECK_ACC" MUST BE
--     REJECTED.

-- HISTORY:
--     JET 09/03/87  CREATED ORIGINAL TEST.
--     JET 01/20/88  ADDED TEST FOR APPLICABILITY.
--     DHH 01/31/89  REVISED FAILED CRITERIA FOR COLLECTION SIZE.
--     DHH 04/26/89  CHANGED OPERATORS ON 'SIZE TESTS.

WITH REPORT;  USE REPORT;
WITH SYSTEM;
PROCEDURE CD2A84O IS

     BASIC_SIZE : CONSTANT := 8;
     COLL_SIZE : CONSTANT := 128;

     TYPE CHECK_ACC IS ACCESS INTEGER;

     FOR CHECK_ACC'STORAGE_SIZE USE COLL_SIZE;

     FOR CHECK_ACC'SIZE USE BASIC_SIZE;           -- N/A => ERROR.

     UNITS_PER_INTEGER : CONSTANT :=
                    (INTEGER'SIZE + SYSTEM.STORAGE_UNIT - 1) /
                    SYSTEM.STORAGE_UNIT;

     TYPE ACC_ARRAY_TYPE IS ARRAY
          (INTEGER RANGE 1 .. ( CHECK_ACC'STORAGE_SIZE/
                                UNITS_PER_INTEGER))
          OF CHECK_ACC;
     ACC_ARRAY : ACC_ARRAY_TYPE;

     ACC : CHECK_ACC;
     PLACE : INTEGER;

     DONE : EXCEPTION;
BEGIN
     TEST ("CD2A84O", "CHECK THAT IF SIZE AND COLLECTION SIZE " &
                      "SPECIFICATIONS ARE GIVEN FOR AN ACCESS " &
                      "TYPE AND THE SIZE IS SPECIFIED AS THE " &
                      "SMALLEST APPROPRIATE SIZE FOR A SIGNED " &
                      "SIZE REPRESENTATION, THEN THE " &
                      "STORAGE_ERROR EXCEPTION IS RAISED WHEN " &
                      "THE ALLOCATED SPACE EXCEEDS THE SPECIFIED " &
                      "COLLECTION SIZE");

     IF CHECK_ACC'SIZE /= IDENT_INT (BASIC_SIZE) THEN
          FAILED ("INCORRECT VALUE FOR CHECK_ACC'SIZE");
     END IF;

     IF CHECK_ACC'STORAGE_SIZE < IDENT_INT (COLL_SIZE) THEN
          FAILED ("INCORRECT VALUE FOR CHECK_ACC'STORAGE_SIZE");
     ELSIF CHECK_ACC'STORAGE_SIZE > 512 THEN
          FAILED ("TOO MUCH SPACE ALLOWED FOR STORAGE_SIZE");
     ELSE
          BEGIN
               FOR I IN ACC_ARRAY'RANGE LOOP
                    PLACE := I;
                    ACC_ARRAY (I) := NEW INTEGER'(I);
                    IF ACC_ARRAY (I).ALL /= IDENT_INT (I) THEN
                         FAILED ("INCORRECT VALUE FOR ACC_ARRAY (" &
                                 INTEGER'IMAGE (I) & ")");
                    END IF;
               END LOOP;
               IF ACC_ARRAY(PLACE).ALL /= PLACE THEN
                    FAILED("INCORRECT VALUE FOR ARRAY");
               END IF;

          EXCEPTION
               WHEN STORAGE_ERROR =>
                    IF ACC_ARRAY(PLACE-1).ALL /= PLACE - 1 THEN
                         FAILED("INCORRECT VALUE FOR ARRAY");
                    END IF;
                    RAISE DONE;
               WHEN OTHERS =>
                    FAILED ("UNEXPECTED EXCEPTION RAISED AT " &
                            "ALLOCATION" & INTEGER'IMAGE(PLACE));
          END;

          BEGIN
               ACC := NEW INTEGER'(0);

               IF EQUAL (ACC.ALL, 0) THEN
                    FAILED ("NO EXCEPTION RAISED WHEN ALLOCATED SIZE " &
                            "EXCEEDED STORAGE SIZE");
               END IF;

          EXCEPTION
               WHEN STORAGE_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ("WRONG EXCEPTION RAISED WHEN " &
                            "ALLOCATED SIZE EXCEEDED STORAGE SIZE");
          END;
     END IF;

     RESULT;

EXCEPTION
     WHEN DONE =>

          RESULT;

END CD2A84O;
