-- C46013B.DEP

-- OBJECTIVE:
--     CHECK THAT INTEGER CONVERSIONS ARE PERFORMED CORRECTLY WHEN THE
--     OPERAND TYPE IS A FIXED POINT TYPE WITH 'SMALL NOT A POWER
--     OF TWO.

-- APPLICABILTIY CRITERIA:
--     THIS TEST IS ONLY APPLICABLE TO IMPLEMENTATIONS THAT SUPPORT A
--     SPECIFIED 'SMALL THAT IS NOT A POWER OF TWO.

--     IF VALUES OF 'SMALL OTHER THAN POWERS OF TWO ARE NOT SUPPORTED,
--     THEN THE REPRESENTATION CLAUSE FOR FIX1 MUST BE REJECTED.

-- HISTORY:
--     JET 02/09/88  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;

PROCEDURE C46013B IS

     TYPE FIX1 IS DELTA 2#0.1# RANGE -16#20.0# .. 16#20.0#;
     FOR FIX1'SMALL USE 2#0.011#;                    -- N/A => ERROR.
     TYPE FIX2 IS DELTA 2#0.001# RANGE -16#80.0# .. 16#80.0#;
     FOR FIX2'SMALL USE 2#0.00011#;
     TYPE FIX3 IS DELTA 2#0.00001# RANGE -16#200.0# .. 16#200.0#;
     FOR FIX3'SMALL USE 2#0.0000011#;

     TYPE FIX4 IS NEW FIX1;

     F1, F1A, F1B : FIX1;
     F2 : FIX2;
     F3 : FIX3;
     F4 : FIX4;

     TYPE INT IS RANGE -16#200# .. 16#200#;

     GENERIC
          TYPE F IS DELTA <>;
     FUNCTION IDENT_G (X : F) RETURN F;

     FUNCTION IDENT_G (X : F) RETURN F IS
     BEGIN
          RETURN X + F(IDENT_INT(0));
     END IDENT_G;

     FUNCTION IDENT IS NEW IDENT_G(FIX1);
     FUNCTION IDENT IS NEW IDENT_G(FIX2);
     FUNCTION IDENT IS NEW IDENT_G(FIX3);
     FUNCTION IDENT IS NEW IDENT_G(FIX4);

BEGIN
     TEST ("C46013B", "CHECK THAT INTEGER CONVERSIONS ARE PERFORMED " &
                      "CORRECTLY WHEN THE OPERAND TYPE IS A FIXED " &
                      "POINT TYPE WITH 'SMALL NOT A POWER OF TWO");

     F1 := IDENT(16#1E.6#);
     IF INTEGER(F1) /= 16#1E# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (1)");
     END IF;

     F1 := IDENT(-16#2.A#);
     IF INT(F1) /= -16#3# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (2)");
     END IF;

     F1 := IDENT(16#7.8#);
     IF INTEGER(F1) /= 16#7# AND
        INTEGER(F1) /= 16#8# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (3)");
     END IF;

     F2 := IDENT(-16#0.90#);
     IF INTEGER(F2) /= -16#1# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (4)");
     END IF;

     F2 := IDENT(16#7F.08#);
     IF INT(F2) /= 16#7F# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (5)");
     END IF;

     F2 := IDENT(-16#40.80#);
     IF INT(F2) /= -16#40# AND
        INT(F2) /= -16#41# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (6)");
     END IF;

     F3 := IDENT(-16#100.86#);
     IF INTEGER(F3) /= -16#101# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (7)");
     END IF;

     F3 := IDENT(16#1.86#);
     IF INT(F3) /= 16#2# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (8)");
     END IF;

     F3 := IDENT(16#1FF.80#);
     IF INTEGER(F3) /= 16#200# AND
        INTEGER(F3) /= 16#1FF# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (9)");
     END IF;

     F4 := IDENT(16#2.4#);
     IF INTEGER(F4) /= 16#2# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (10)");
     END IF;

     F4 := IDENT(-16#1B.6#);
     IF INT(F4) /= -16#1B# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (11)");
     END IF;

     F4 := IDENT(-16#1.8#);
     IF INT(F4) /= -16#1# AND
        INT(F4) /= -16#2# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (12)");
     END IF;

     F1A := IDENT(16#4.8#);
     F1B := IDENT(16#1.8#);

     IF INTEGER(-F1A) = IDENT_INT(-4) AND
        INTEGER(-F1B) = IDENT_INT(-1) AND
        INTEGER(F1B) = IDENT_INT(2) AND
        INTEGER(F1A) = IDENT_INT(5) THEN
          COMMENT ("HALF VALUES ROUND UP");
     ELSIF INTEGER(-F1A) = IDENT_INT(-5) AND
           INTEGER(-F1B) = IDENT_INT(-2) AND
           INTEGER(F1B) = IDENT_INT(1) AND
           INTEGER(F1A) = IDENT_INT(4) THEN
          COMMENT ("HALF VALUES ROUND DOWN");
     ELSIF INTEGER(-F1A) = IDENT_INT(-4) AND
           INTEGER(-F1B) = IDENT_INT(-2) AND
           INTEGER(F1B) = IDENT_INT(2) AND
           INTEGER(F1A) = IDENT_INT(4) THEN
          COMMENT ("HALF VALUES ROUND TO EVEN");
     ELSIF INTEGER(-F1A) = IDENT_INT(-4) AND
           INTEGER(-F1B) = IDENT_INT(-1) AND
           INTEGER(F1B) = IDENT_INT(1) AND
           INTEGER(F1A) = IDENT_INT(4) THEN
          COMMENT ("HALF VALUES ROUND TOWARD ZERO");
     ELSIF INTEGER(-F1A) = IDENT_INT(-5) AND
           INTEGER(-F1B) = IDENT_INT(-2) AND
           INTEGER(F1B) = IDENT_INT(2) AND
           INTEGER(F1A) = IDENT_INT(5) THEN
          COMMENT ("HALF VALUES ROUND AWAY FROM ZERO");
     ELSE
          COMMENT ("HALF VALUES ROUND ERRATICALLY");
     END IF;

     RESULT;

END C46013B;
