-- CE3111D.ADA

-- OBJECTIVE:
--     CHECK THAT IF TWO INTERNAL FILES ARE ASSOCIATED WITH THE SAME
--     EXTERNAL FILE NAME, THE IMPLEMENTATION DOES NOT CREATE TWO
--     VERSIONS OF THE FILE.  THIS TEST USES THE SAME STRING IN A
--     CREATE AND OPEN CALL.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS WHICH
--     SUPPORT TWO INTERNAL FILES ASSOCIATED WITH THE SAME EXTERNAL
--     FILE NAME FOR WRITING.

-- HISTORY:
--     JBG 06/05/84
--     TBN 11/04/86  REVISED TEST TO OUTPUT A NON_APPLICABLE
--                   RESULT WHEN FILES ARE NOT SUPPORTED.
--     DWC 08/18/87  REVISED EXCEPTION HANDLER FOR DELETION
--                   OF FILE.

WITH REPORT; USE REPORT;
WITH TEXT_IO; USE TEXT_IO;
PROCEDURE CE3111D IS
     FILE1, FILE2 : FILE_TYPE;
     INCOMPLETE, SUBTEST : EXCEPTION;
     CHAR         : CHARACTER;
BEGIN

     TEST ("CE3111D", "CHECK THAT OPEN DOES NOT CREATE A NEW VERSION " &
                      "OF AN EXTERNAL FILE");

     BEGIN
          CREATE (FILE1, OUT_FILE, LEGAL_FILE_NAME);
     EXCEPTION
          WHEN USE_ERROR =>
               NOT_APPLICABLE ("USE_ERROR RAISED; TEXT CREATE " &
                               "WITH OUT_FILE MODE");
               RAISE INCOMPLETE;
          WHEN NAME_ERROR =>
               NOT_APPLICABLE ("NAME_ERROR RAISED; TEXT CREATE " &
                               "WITH OUT_FILE MODE");
               RAISE INCOMPLETE;
          WHEN OTHERS =>
               FAILED ("UNEXPECTED EXCEPTION RAISED; TEXT CREATE");
               RAISE INCOMPLETE;
     END;

-- NOW OPEN WITH THE SAME EXTERNAL STRING NAME
     BEGIN
          OPEN (FILE2, OUT_FILE, LEGAL_FILE_NAME);
     EXCEPTION
          WHEN USE_ERROR =>
               NOT_APPLICABLE ("CANNOT ASSOCIATE TWO INTERNAL FILES " &
                               "WITH SAME EXTERNAL FILE FOR WRITING");
               RAISE SUBTEST;
          WHEN OTHERS =>
               FAILED ("UNEXPECTED EXCEPTION RAISED - 1");
               RAISE SUBTEST;
     END;

     PUT (FILE2, "C");        -- WILL WRITE MOST RECENT VERSION, IF
                              -- IMPLEMENTATION HAS INCORRECTLY OPENED
                              -- ANOTHER VERSION OF THE EXTERNAL FILE.
     PUT (FILE1, "D");        -- SHOULD OVERWRITE FIRST POSITION OF FILE
                              -- IF THE SAME EXTERNAL FILE IS BEING
                              -- USED.
     CLOSE (FILE2);
     CLOSE (FILE1);

-- NOW WE WILL OPEN THE FILE TO SEE WHAT IT CONTAINS.  IF THE
-- IMPLEMENTATION HAS CREATED DIFFERENT VERSIONS, IT SHOULD OPEN THE
-- MOST RECENT VERSION.

     BEGIN
          OPEN (FILE1, IN_FILE, LEGAL_FILE_NAME);
     EXCEPTION
          WHEN USE_ERROR =>
               NOT_APPLICABLE ("USE_ERROR RAISED; TEXT OPEN WITH " &
                               "IN_FILE MODE");
               RAISE SUBTEST;
     END;

     GET (FILE1, CHAR);
     IF CHAR /= 'D' OR NOT END_OF_FILE(FILE1) THEN
          FAILED ("OPEN CREATED A NEW VERSION");
     END IF;

     BEGIN
          DELETE (FILE1);
     EXCEPTION
          WHEN USE_ERROR =>
               COMMENT ("DELETION OF EXTERNAL FILE NOT " &
                        "SUPPORTED");
     END;

     RESULT;

EXCEPTION
     WHEN INCOMPLETE =>
          RESULT;
     WHEN SUBTEST =>
          BEGIN
               DELETE (FILE1);
          EXCEPTION
               WHEN USE_ERROR =>
                    NULL;
          END;
          RESULT;

END CE3111D;
