-- C45304C.DEP

-- OBJECTIVE:
--     CHECK THAT NUMERIC_ERROR OR CONSTRAINT_ERROR IS RAISED BY
--     "+" AND "-" FOR PREDEFINED LONG_INTEGER WHEN THE RESULT IS
--     OUTSIDE THE RANGE OF THE BASE TYPE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE IF THE IMPLEMENTATION HAS A
--     PREDEFINED TYPE LONG_INTEGER.

--     IF LONG_INTEGER IS NOT SUPPORTED, THEN THE DECLARATION OF
--     "TEST_VAR" MUST BE REJECTED.

-- HISTORY:
--     TBN 10/07/86  CREATED ORIGINAL TEST.
--     JET 12/30/87  ADDED CODE TO PREVENT OPTIMIZATION.

WITH REPORT; USE REPORT;
PROCEDURE C45304C IS

     TEST_VAR : LONG_INTEGER;               -- N/A => ERROR.

     -- THESE FUNCTIONS ARE TO PREVENT OPTIMIZATION.

     FUNCTION IDENT_LONG (X : LONG_INTEGER) RETURN LONG_INTEGER IS
     BEGIN
          IF EQUAL (3, 3) THEN
               RETURN X;
          ELSE
               RETURN 0;
          END IF;
     END IDENT_LONG;

     FUNCTION LONG_OK (X : LONG_INTEGER) RETURN BOOLEAN IS
     BEGIN
          RETURN X = IDENT_LONG(X);
     END LONG_OK;

BEGIN
     TEST ("C45304C", "CHECK THAT NUMERIC_ERROR OR CONSTRAINT_ERROR " &
                      "IS RAISED BY ""+"" AND ""-"" FOR PREDEFINED " &
                      "LONG_INTEGER WHEN THE RESULT IS OUTSIDE THE " &
                      "RANGE OF THE BASE TYPE");

     DECLARE
          B : LONG_INTEGER := LONG_INTEGER'LAST;
     BEGIN
          IF LONG_OK (B + IDENT_LONG(1)) THEN
               FAILED ("NO EXCEPTION RAISED FOR ADDITION - " &
                       "LONG_OK RETURNS TRUE");
          ELSE
               FAILED ("NO EXCEPTION RAISED FOR ADDITION - " &
                       "LONG_OK RETURNS FALSE");
          END IF;

     EXCEPTION
          WHEN NUMERIC_ERROR | CONSTRAINT_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("UNEXPECTED EXCEPTION RAISED - 1");
     END;

     DECLARE
          B : LONG_INTEGER := LONG_INTEGER'FIRST;
     BEGIN
          IF LONG_OK (B - IDENT_LONG(1)) THEN
               FAILED ("NO EXCEPTION RAISED FOR SUBTRACTION - " &
                       "LONG_OK RETURNS TRUE");
          ELSE
               FAILED ("NO EXCEPTION RAISED FOR SUBTRACTION - " &
                       "LONG_OK RETURNS FALSE");
          END IF;

     EXCEPTION
          WHEN NUMERIC_ERROR | CONSTRAINT_ERROR =>
               NULL;
          WHEN OTHERS =>
               FAILED ("UNEXPECTED EXCEPTION RAISED - 2");
     END;

     RESULT;
END C45304C;
