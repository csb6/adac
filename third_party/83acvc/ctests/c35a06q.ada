-- C35A06Q.ADA

-- OBJECTIVE:
--     CHECK THAT FOR FIXED POINT TYPES THE SAFE_SMALL AND SAFE_LARGE
--     ATTRIBUTES YIELD APPROPRIATE VALUES.

--     CASE Q: TYPES TYPICAL OF APPLICATIONS USING FIXED POINT
--             ARITHMETIC FOR GENERICS.

-- HISTORY:
--     WRG 08/25/86
--     JLH 09/25/87  REFORMATTED HEADER.

WITH REPORT; USE REPORT;
WITH SYSTEM; USE SYSTEM;

PROCEDURE C35A06Q IS

     PI      : CONSTANT := 3.14159_26535_89793_23846;
     TWO_PI  : CONSTANT := 2 * PI;
     HALF_PI : CONSTANT := PI / 2;

     MM : CONSTANT := MAX_MANTISSA;

     -- THE NAME OF EACH TYPE OR SUBTYPE ENDS WITH THAT TYPE'S
     -- 'MANTISSA VALUE.

     TYPE MICRO_ANGLE_ERROR_M15  IS
          DELTA 16.0  RANGE -(2.0 ** 19) .. 2.0 ** 19;
     TYPE TRACK_RANGE_M15        IS
          DELTA 0.125 RANGE -(2.0 ** 12) .. 2.0 ** 12;
     TYPE SECONDS_MM             IS
          DELTA 2.0 ** (8 - MM) RANGE -(2.0 ** 8) .. 2.0 ** 8;
     TYPE RANGE_CELL_MM          IS
          DELTA 2.0 ** (-5)
          RANGE -(2.0 ** (MM - 5) ) .. 2.0 ** (MM - 5);

     TYPE PIXEL_M10 IS DELTA 1.0 / 1024.0 RANGE 0.0 ..  1.0;
     TYPE RULER_M8  IS DELTA 1.0 / 16.0   RANGE 0.0 .. 12.0;

     TYPE HOURS_M16 IS DELTA   24.0 * 2.0 ** (-15) RANGE 0.0 ..   24.0;
     TYPE MILES_M16 IS DELTA 3000.0 * 2.0 ** (-15) RANGE 0.0 .. 3000.0;

     TYPE SYMMETRIC_DEGREES_M7  IS
          DELTA 2.0         RANGE -180.0 .. 180.0;
     TYPE NATURAL_DEGREES_M15   IS
          DELTA 2.0 ** (-6) RANGE    0.0 .. 360.0;
     TYPE SYMMETRIC_RADIANS_M16 IS
          DELTA     PI * 2.0 ** (-15) RANGE -PI .. PI;
     TYPE NATURAL_RADIANS_M8    IS
          DELTA TWO_PI * 2.0 ** ( -7) RANGE 0.0 .. TWO_PI;

     -------------------------------------------------------------------

     TYPE MICRO_ANGLE_ERROR_M15_BASE IS
          DELTA MICRO_ANGLE_ERROR_M15'SAFE_SMALL
          RANGE -MICRO_ANGLE_ERROR_M15'SAFE_LARGE ..
                 MICRO_ANGLE_ERROR_M15'SAFE_LARGE;
     TYPE TRACK_RANGE_M15_BASE IS DELTA TRACK_RANGE_M15'SAFE_SMALL
          RANGE -TRACK_RANGE_M15'SAFE_LARGE ..
                 TRACK_RANGE_M15'SAFE_LARGE;
     TYPE SECONDS_MM_BASE      IS DELTA SECONDS_MM'SAFE_SMALL
          RANGE -SECONDS_MM'SAFE_LARGE    .. SECONDS_MM'SAFE_LARGE;
     TYPE RANGE_CELL_MM_BASE   IS DELTA RANGE_CELL_MM'SAFE_SMALL
          RANGE -RANGE_CELL_MM'SAFE_LARGE .. RANGE_CELL_MM'SAFE_LARGE;
     TYPE PIXEL_M10_BASE       IS DELTA PIXEL_M10'SAFE_SMALL
          RANGE -PIXEL_M10'SAFE_LARGE     .. PIXEL_M10'SAFE_LARGE;
     TYPE RULER_M8_BASE        IS DELTA RULER_M8'SAFE_SMALL
          RANGE -RULER_M8'SAFE_LARGE      .. RULER_M8'SAFE_LARGE;
     TYPE HOURS_M16_BASE       IS DELTA HOURS_M16'SAFE_SMALL
          RANGE -HOURS_M16'SAFE_LARGE     .. HOURS_M16'SAFE_LARGE;
     TYPE MILES_M16_BASE       IS DELTA MILES_M16'SAFE_SMALL
          RANGE -MILES_M16'SAFE_LARGE     .. MILES_M16'SAFE_LARGE;
     TYPE SYMMETRIC_DEGREES_M7_BASE  IS
          DELTA SYMMETRIC_DEGREES_M7'SAFE_SMALL
          RANGE -SYMMETRIC_DEGREES_M7'SAFE_LARGE ..
                 SYMMETRIC_DEGREES_M7'SAFE_LARGE;
     TYPE NATURAL_DEGREES_M15_BASE   IS
          DELTA NATURAL_DEGREES_M15'SAFE_SMALL
          RANGE -NATURAL_DEGREES_M15'SAFE_LARGE ..
                 NATURAL_DEGREES_M15'SAFE_LARGE;
     TYPE SYMMETRIC_RADIANS_M16_BASE IS
          DELTA SYMMETRIC_RADIANS_M16'SAFE_SMALL
          RANGE -SYMMETRIC_RADIANS_M16'SAFE_LARGE ..
                 SYMMETRIC_RADIANS_M16'SAFE_LARGE;
     TYPE NATURAL_RADIANS_M8_BASE    IS
          DELTA NATURAL_RADIANS_M8'SAFE_SMALL
          RANGE -NATURAL_RADIANS_M8'SAFE_LARGE ..
                 NATURAL_RADIANS_M8'SAFE_LARGE;

     -------------------------------------------------------------------

     SUBTYPE ST_MILES_M8             IS MILES_M16
          DELTA 3000.0 * 2.0 ** (-15) RANGE 0.0 .. 10.0;
     SUBTYPE ST_NATURAL_DEGREES_M11  IS NATURAL_DEGREES_M15
          DELTA 0.25 RANGE 0.0 .. 360.0;
     SUBTYPE ST_SYMMETRIC_RADIANS_M8 IS SYMMETRIC_RADIANS_M16
          DELTA HALF_PI * 2.0 ** (-7) RANGE -HALF_PI .. HALF_PI;

     -------------------------------------------------------------------

     GENERIC
          TYPE T IS DELTA <>;
          TYPE B IS DELTA <>;
     PROCEDURE CHECK_ATTRIBUTES (NAME : STRING;
                                 SAFE_SMALL, SAFE_LARGE : B);

     PROCEDURE CHECK_ATTRIBUTES (NAME : STRING;
                                 SAFE_SMALL, SAFE_LARGE : B) IS
     BEGIN
          IF T'SAFE_SMALL /= T'BASE'SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SMALL VALUE FOR " & NAME);
          END IF;

          IF T'SAFE_LARGE /= T'BASE'LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'LARGE VALUE FOR " & NAME);
          END IF;

          IF T'SAFE_SMALL /= T'BASE'SAFE_SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SAFE_SMALL VALUE FOR " &
                       NAME);
          END IF;

          IF T'SAFE_LARGE /= T'BASE'SAFE_LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SAFE_LARGE VALUE FOR " &
                       NAME);
          END IF;

          IF T'SMALL < T'BASE'SAFE_SMALL THEN
               FAILED ("GENERIC 'SMALL VALUE FOR " & NAME &
                       " < GENERIC 'BASE'SAFE_SMALL FOR " & NAME);
          END IF;

          IF T'LARGE > T'BASE'SAFE_LARGE THEN
               FAILED ("GENERIC 'LARGE VALUE FOR " & NAME &
                       " > GENERIC 'BASE'SAFE_LARGE FOR " & NAME);
          END IF;

          IF T'SAFE_SMALL /= SAFE_SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= " & NAME & "'SAFE_SMALL");
          END IF;

          IF T'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= " & NAME & "'SAFE_LARGE");
          END IF;
     END CHECK_ATTRIBUTES;

     -------------------------------------------------------------------

     PROCEDURE CHECK_MICRO_ANGLE_ERROR_M15
          IS NEW CHECK_ATTRIBUTES (MICRO_ANGLE_ERROR_M15,
                                   MICRO_ANGLE_ERROR_M15_BASE);
     PROCEDURE CHECK_TRACK_RANGE_M15
          IS NEW CHECK_ATTRIBUTES (TRACK_RANGE_M15,
                                   TRACK_RANGE_M15_BASE);
     PROCEDURE CHECK_SECONDS_MM
          IS NEW CHECK_ATTRIBUTES (SECONDS_MM,    SECONDS_MM_BASE);
     PROCEDURE CHECK_RANGE_CELL_MM
          IS NEW CHECK_ATTRIBUTES (RANGE_CELL_MM, RANGE_CELL_MM_BASE);
     PROCEDURE CHECK_PIXEL_M10
          IS NEW CHECK_ATTRIBUTES (PIXEL_M10,     PIXEL_M10_BASE);
     PROCEDURE CHECK_RULER_M8
          IS NEW CHECK_ATTRIBUTES (RULER_M8,      RULER_M8_BASE);
     PROCEDURE CHECK_HOURS_M16
          IS NEW CHECK_ATTRIBUTES (HOURS_M16,     HOURS_M16_BASE);
     PROCEDURE CHECK_MILES_M16
          IS NEW CHECK_ATTRIBUTES (MILES_M16,     MILES_M16_BASE);
     PROCEDURE CHECK_SYMMETRIC_DEGREES_M7
          IS NEW CHECK_ATTRIBUTES (SYMMETRIC_DEGREES_M7,
                                   SYMMETRIC_DEGREES_M7_BASE);
     PROCEDURE CHECK_NATURAL_DEGREES_M15
          IS NEW CHECK_ATTRIBUTES (NATURAL_DEGREES_M15,
                                   NATURAL_DEGREES_M15_BASE);
     PROCEDURE CHECK_SYMMETRIC_RADIANS_M16
          IS NEW CHECK_ATTRIBUTES (SYMMETRIC_RADIANS_M16,
                                   SYMMETRIC_RADIANS_M16_BASE);
     PROCEDURE CHECK_NATURAL_RADIANS_M8
          IS NEW CHECK_ATTRIBUTES (NATURAL_RADIANS_M8,
                                   NATURAL_RADIANS_M8_BASE);
     PROCEDURE CHECK_ST_MILES_M8
          IS NEW CHECK_ATTRIBUTES (ST_MILES_M8,   MILES_M16_BASE);
     PROCEDURE CHECK_ST_NATURAL_DEGREES_M11
          IS NEW CHECK_ATTRIBUTES (ST_NATURAL_DEGREES_M11,
                                   NATURAL_DEGREES_M15_BASE);
     PROCEDURE CHECK_ST_SYMMETRIC_RADIANS_M8
          IS NEW CHECK_ATTRIBUTES (ST_SYMMETRIC_RADIANS_M8,
                                   SYMMETRIC_RADIANS_M16_BASE);

BEGIN

     TEST ("C35A06Q", "CHECK THAT FOR FIXED POINT TYPES THE " &
                      "SAFE_SMALL AND SAFE_LARGE ATTRIBUTES YIELD " &
                      "APPROPRIATE VALUES - TYPICAL TYPES, GENERICS");

     -------------------------------------------------------------------

     CHECK_MICRO_ANGLE_ERROR_M15 ("MICRO_ANGLE_ERROR_M15",
          MICRO_ANGLE_ERROR_M15'SAFE_SMALL,
          MICRO_ANGLE_ERROR_M15'SAFE_LARGE);
     CHECK_TRACK_RANGE_M15       ("TRACK_RANGE_M15",
          TRACK_RANGE_M15'SAFE_SMALL, TRACK_RANGE_M15'SAFE_LARGE);
     CHECK_SECONDS_MM            ("SECONDS_MM",
          SECONDS_MM'SAFE_SMALL,      SECONDS_MM'SAFE_LARGE);
     CHECK_RANGE_CELL_MM         ("RANGE_CELL_MM",
          RANGE_CELL_MM'SAFE_SMALL,   RANGE_CELL_MM'SAFE_LARGE);
     CHECK_PIXEL_M10             ("PIXEL_M10",
          PIXEL_M10'SAFE_SMALL,       PIXEL_M10'SAFE_LARGE);
     CHECK_RULER_M8              ("RULER_M8",
          RULER_M8'SAFE_SMALL,        RULER_M8'SAFE_LARGE);
     CHECK_HOURS_M16             ("HOURS_M16",
          HOURS_M16'SAFE_SMALL,       HOURS_M16'SAFE_LARGE);
     CHECK_MILES_M16             ("MILES_M16",
          MILES_M16'SAFE_SMALL,       MILES_M16'SAFE_LARGE);
     CHECK_SYMMETRIC_DEGREES_M7  ("SYMMETRIC_DEGREES_M7",
          SYMMETRIC_DEGREES_M7'SAFE_SMALL,
          SYMMETRIC_DEGREES_M7'SAFE_LARGE);
     CHECK_NATURAL_DEGREES_M15   ("NATURAL_DEGREES_M15",
          NATURAL_DEGREES_M15'SAFE_SMALL,
          NATURAL_DEGREES_M15'SAFE_LARGE);
     CHECK_SYMMETRIC_RADIANS_M16 ("SYMMETRIC_RADIANS_M16",
          SYMMETRIC_RADIANS_M16'SAFE_SMALL,
          SYMMETRIC_RADIANS_M16'SAFE_LARGE);
     CHECK_NATURAL_RADIANS_M8    ("NATURAL_RADIANS_M8",
          NATURAL_RADIANS_M8'SAFE_SMALL,
          NATURAL_RADIANS_M8'SAFE_LARGE);

     CHECK_ST_MILES_M8             ("ST_MILES_M8",
          ST_MILES_M8'SAFE_SMALL, ST_MILES_M8'SAFE_LARGE);
     CHECK_ST_NATURAL_DEGREES_M11  ("ST_NATURAL_DEGREES_M11",
          ST_NATURAL_DEGREES_M11'SAFE_SMALL,
          ST_NATURAL_DEGREES_M11'SAFE_LARGE);
     CHECK_ST_SYMMETRIC_RADIANS_M8 ("ST_SYMMETRIC_RADIANS_M8",
          ST_SYMMETRIC_RADIANS_M8'SAFE_SMALL,
          ST_SYMMETRIC_RADIANS_M8'SAFE_LARGE);

     RESULT;

END C35A06Q;
