-- CC1226B.ADA

-- OBJECTIVE:
--     CHECK, FOR A FORMAL NONLIMITED PRIVATE TYPE, THAT ALL ALLOWABLE
--     OPERATIONS ARE IMPLICITLY DECLARED.

-- HISTORY:
--     BCB 04/04/88  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;
WITH SYSTEM; USE SYSTEM;

PROCEDURE CC1226B IS

     TYPE DISCREC(DISC1 : INTEGER := 1;
                  DISC2 : BOOLEAN := FALSE) IS RECORD
          NULL;
     END RECORD;

     GENERIC
          TYPE NLP IS PRIVATE;
          TYPE NLPDISC(DISC1 : INTEGER;
                       DISC2 : BOOLEAN) IS PRIVATE;
     PACKAGE P IS
          FUNCTION IDENT(X : NLP) RETURN NLP;
          FUNCTION IDENT_ADR(Y : ADDRESS) RETURN ADDRESS;
     END P;

     PACKAGE BODY P IS
          TYPE DER_NLP IS NEW NLP;
          NLPVAR, NLPVAR2, NLPVAR3 : NLP;
          DERNLP : DER_NLP;
          NDVAR : NLPDISC(DISC1 => 5, DISC2 => TRUE);
          NLPVARADDRESS : ADDRESS;
          NLPSIZE : INTEGER;
          NLPBASESIZE : INTEGER;

          FUNCTION IDENT(X : NLP) RETURN NLP IS
               Z : NLP;
          BEGIN
               IF EQUAL(3,3) THEN
                    RETURN X;
               END IF;
               RETURN Z;
          END IDENT;

          FUNCTION IDENT_ADR(Y : ADDRESS) RETURN ADDRESS IS
               Z : ADDRESS;
          BEGIN
               IF EQUAL(3,3) THEN
                    RETURN Y;
               END IF;
               RETURN Z;
          END IDENT_ADR;

     BEGIN
          TEST ("CC1226B", "CHECK, FOR A FORMAL NONLIMITED PRIVATE " &
                           "TYPE THAT ALL ALLOWABLE OPERATIONS ARE " &
                           "IMPLICITLY DECLARED");

          NLPVAR := NLPVAR2;

          IF NLPVAR /= NLPVAR2 THEN
               FAILED ("IMPROPER VALUE FROM ASSIGNMENT");
          END IF;

          IF NLPVAR NOT IN NLP THEN
               FAILED ("IMPROPER RESULT FROM MEMBERSHIP TEST");
          END IF;

          NLPVAR := NLP'(NLPVAR2);

          IF NLPVAR /= NLPVAR2 THEN
               FAILED ("IMPROPER RESULT FROM QUALIFICATION");
          END IF;

          NLPVAR := NLP(DERNLP);

          IF NLPVAR /= IDENT(NLP(DERNLP)) THEN
               FAILED ("IMPROPER RESULT FROM EXPLICIT CONVERSION");
          END IF;

          NLPBASESIZE := NLP'BASE'SIZE;

          IF NLPBASESIZE /= IDENT_INT(NLP'BASE'SIZE) THEN
               FAILED ("IMPROPER VALUE FOR NLP'BASE'SIZE");
          END  IF;

          NLPSIZE := IDENT_INT(NLP'SIZE);

          IF NLPSIZE /= INTEGER(NLP'SIZE) THEN
               FAILED ("IMPROPER VALUE FOR NLP'SIZE");
          END IF;

          IF NOT NLP'CONSTRAINED THEN
               FAILED ("IMPROPER VALUE FOR NLP'CONSTRAINED");
          END IF;

          NLPVARADDRESS := NLPVAR'ADDRESS;

          IF NLPVAR'ADDRESS /= IDENT_ADR(NLPVARADDRESS) THEN
               FAILED ("IMPROPER VALUE FOR NLPVAR'ADDRESS");
          END IF;

          IF NDVAR.DISC1 /= IDENT_INT(5) THEN
               FAILED ("IMPROPER DISCRIMINANT VALUE - 1");
          END IF;

          IF NOT NDVAR.DISC2 THEN
               FAILED ("IMPROPER DISCRIMINANT VALUE - 2");
          END IF;

          IF NOT NDVAR'CONSTRAINED THEN
               FAILED ("IMPROPER VALUE FOR NDVAR'CONSTRAINED");
          END IF;

          NLPVAR := NLPVAR3;

          IF NLPVAR = IDENT(NLPVAR2) THEN
               FAILED ("IMPROPER VALUE FROM EQUALITY OPERATION");
          END IF;

          IF NLPVAR /= IDENT(NLPVAR3) THEN
               FAILED ("IMPROPER VALUE FROM INEQUALITY OPERATION");
          END IF;

          RESULT;
     END P;

     PACKAGE PACK IS NEW P(INTEGER,DISCREC);

     USE PACK;

BEGIN
     NULL;
END CC1226B;
