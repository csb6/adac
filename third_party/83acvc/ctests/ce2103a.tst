-- CE2103A.TST

-- OBJECTIVE:
--     CHECK THAT IS_OPEN RETURNS THE PROPER VALUES FOR FILES OF
--     TYPE SEQUENTIAL_IO.

--          A) UNOPENED FILES

-- HISTORY:
--     DLD 08/10/82
--     SPS 11/09/82
--     JBG 03/24/83
--     EG  06/03/85
--     SPW 08/10/87  SPLIT CASE FOR OPENED FILES INTO CE2103C.ADA.

WITH REPORT; USE REPORT;
WITH SEQUENTIAL_IO;

PROCEDURE CE2103A IS

     PACKAGE SEQ_IO IS NEW SEQUENTIAL_IO(CHARACTER);
          USE SEQ_IO;

     TEST_FILE_ONE : SEQ_IO.FILE_TYPE;
     TEST_FILE_TWO : SEQ_IO.FILE_TYPE;
     TEST_FILE_THREE : SEQ_IO.FILE_TYPE;
     TEST_FILE_FOUR : SEQ_IO.FILE_TYPE;
     VAL : BOOLEAN;

BEGIN

     TEST ("CE2103A", "CHECK THAT IS_OPEN RETURNS THE PROPER " &
                      "VALUES FOR UNOPENED FILES OF TYPE " &
                      "SEQUENTIAL_IO");

-- WHEN FILE IS DECLARED BUT NOT OPEN

     BEGIN
          VAL := TRUE;
          VAL := IS_OPEN (TEST_FILE_ONE);
          IF VAL = TRUE THEN
               FAILED ("FILE NOT OPEN BUT IS_OPEN RETURNS TRUE");
          END IF;
     END;

-- FOLLOWING UNSUCCESSFUL CREATE

     BEGIN
          VAL := TRUE;
          CREATE (TEST_FILE_TWO, OUT_FILE,
                  "$ILLEGAL_EXTERNAL_FILE_NAME1");
          FAILED ("NAME_ERROR NOT RAISED - UNSUCCESSFUL CREATE");
     EXCEPTION
          WHEN NAME_ERROR =>
               VAL := IS_OPEN (TEST_FILE_TWO);
               IF VAL = TRUE THEN
                    FAILED ("IS_OPEN GIVES TRUE AFTER AN " &
                            "UNSUCCESSFUL CREATE");
               END IF;
     END;

-- FOLLOWING UNSUCCESSFUL OPEN

     BEGIN
          VAL := TRUE;
          OPEN (TEST_FILE_THREE, IN_FILE,
                "$ILLEGAL_EXTERNAL_FILE_NAME2");
          FAILED ("NAME_ERROR NOT RAISED - UNSUCCESSFUL OPEN");
     EXCEPTION
          WHEN NAME_ERROR =>
               VAL := IS_OPEN (TEST_FILE_THREE);
               IF VAL = TRUE THEN
                    FAILED ("IS_OPEN GIVES TRUE - UNSUCCESSFUL OPEN");
               END IF;
     END;

-- FOLLOWING CLOSING FILE THAT IS NOT OPEN

     BEGIN
          VAL := TRUE;
          CLOSE (TEST_FILE_FOUR);
          FAILED ("STATUS ERROR NOT RAISED WHEN " &
                  "ATTEMPTING TO CLOSE AN UNOPENED FILE");
     EXCEPTION
          WHEN STATUS_ERROR =>
               VAL := IS_OPEN (TEST_FILE_FOUR);
               IF VAL = TRUE THEN
                    FAILED ("IS_OPEN GIVES TRUE AFTER ATTEMPTING " &
                            "TO CLOSE AN UNOPENED FILE");
               END IF;
     END;

     RESULT;

END CE2103A;
