-- C35508J.DEP

-- OBJECTIVE:
--     CHECK THAT 'PRED' AND 'SUCC' YIELD THE CORRECT RESULTS WHEN THE
--     PREFIX IS A FORMAL DISCRETE TYPE WHOSE ACTUAL PARAMETER IS A
--     BOOLEAN TYPE WITH AN ENUMERATION REPRESENTATION CLAUSE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE TO IMPLEMENTATIONS THAT SUPPORT
--     ENUMERATION REPRESENTATION CLAUSES.

--     IF ENUMERATION REPRESENTATION CLAUSES ARE NOT SUPPORTED, THEN THE
--     REPRESENTATION CLAUSE FOR 'NEWBOOL' MUST BE REJECTED.

-- HISTORY:
--     RJW 03/24/86 CREATED ORIGINAL TEST.
--     DHH 10/19/87 SHORTENED LINES CONTAINING MORE THAN 72 CHARACTERS.

WITH REPORT; USE REPORT;

PROCEDURE C35508J IS

     TYPE NEWBOOL IS NEW BOOLEAN;
     FOR NEWBOOL USE ( FALSE => 24, TRUE => 32 );  -- N/A => ERROR.

BEGIN
     TEST ("C35508J", "CHECK THAT 'PRED' AND 'SUCC' YIELD THE " &
                      "CORRECT RESULTS WHEN THE PREFIX IS A " &
                      "FORMAL DISCRETE TYPE WHOSE ACTUAL PARAMETER " &
                      "IS A BOOLEAN TYPE WITH AN ENUMERATION " &
                      "REPRESENTATION CLAUSE" );

     DECLARE
          GENERIC
               TYPE BOOL IS (<>);
               F, T : BOOL;
          PROCEDURE P;

          PROCEDURE P IS
               SUBTYPE SBOOL IS BOOL RANGE T .. T;
          BEGIN
               BEGIN
                    IF BOOL'PRED (T) /= F THEN
                         FAILED ( "INCORRECT VALUE FOR PRED OF T" );
                    END IF;
                    IF BOOL'SUCC (F) /= T THEN
                         FAILED ( "INCORRECT VALUE FOR SUCC OF F" );
                    END IF;
               END;

               BEGIN
                    IF SBOOL'PRED (T) /= F THEN
                         FAILED ( "INCORRECT VALUE FOR SBOOL'PRED " &
                                  "OF T" );
                    END IF;
               END;

               BEGIN
                    IF SBOOL'PRED (SBOOL'BASE'FIRST) = T THEN
                         FAILED ("'PRED('FIRST) WRAPPED AROUND TO " &
                                 "TRUE");
                    END IF;
                    FAILED ( "NO EXCEPTION RAISED FOR " &
                             "'PRED (SBOOL'BASE'FIRST)" );
               EXCEPTION
                    WHEN CONSTRAINT_ERROR =>
                         NULL;
                    WHEN OTHERS =>
                         FAILED ( "WRONG EXCEPTION RAISED FOR " &
                                  "'PRED (SBOOL'BASE'FIRST)'" );
               END;

               BEGIN
                    IF SBOOL'SUCC (SBOOL'BASE'LAST) = F THEN
                         FAILED("'SUCC('LAST) WRAPPED AROUND TO FALSE");
                    END IF;
                    FAILED ( "NO EXCEPTION RAISED FOR " &
                             "'SUCC (SBOOL'BASE'LAST)" );
               EXCEPTION
                    WHEN CONSTRAINT_ERROR =>
                         NULL;
                    WHEN OTHERS =>
                         FAILED ( "WRONG EXCEPTION RAISED FOR " &
                                  "'SUCC (SBOOL'BASE'LAST)" );
               END;
          END P;

          PROCEDURE NP IS NEW P
                         ( BOOL => NEWBOOL, F => FALSE, T => TRUE );

     BEGIN
          NP;
     END;

     RESULT;
END C35508J;
