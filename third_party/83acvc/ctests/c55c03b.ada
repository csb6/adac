-- C55C03B.ADA

-- CHECK THAT THE WHILE EXPRESSION MAY BE ARBITRARILY
--    COMPLICATED FOR DYNAMIC EXPRESSIONS.

-- DLD 8/06/82

WITH REPORT; USE REPORT;
PROCEDURE C55C03B IS

     I1 : INTEGER := IDENT_INT (1);
     I9 : INTEGER := IDENT_INT (9);
     BT : BOOLEAN := IDENT_BOOL (TRUE);
     BF : BOOLEAN := IDENT_BOOL (FALSE);

     FLOW_COUNT : INTEGER := 0;

BEGIN
     TEST ("C55C03B", "CHECK THAT WHILE EXPRESSION " &
           "MAY BE ARBITRARILY COMPLICATED FOR " &
           "DYNAMIC EXPRESSIONS");

     -- CHECK SIMPLE BOOLEAN.

     WHILE IDENT_BOOL (TRUE) LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L1;
     END LOOP;
     FAILED ("DYNAMIC BOOLEAN TRUE CONDITION");
<<L1>> NULL;

     WHILE BT LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L2;
     END LOOP;
     FAILED ("DYNAMIC BOOLEAN VARIABLE TRUE CONDITION");
<<L2>> NULL;

     WHILE IDENT_BOOL (FALSE) LOOP  -- (FALSE)
          FAILED ("DYNAMIC BOOLEAN FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF LOOP  -- (FALSE)
          FAILED ("DYNAMIC BOOLEAN VARIABLE FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK SIMPLE RELATION.

     WHILE I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L3;
     END LOOP;
     FAILED ("DYNAMIC SIMPLE RELATION TRUE CONDITION");
<<L3>> NULL;

     WHILE 5 > I9 LOOP  -- (FALSE)
          FAILED ("DYNAMIC SIMPLE RELATION FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK LOGICAL EXPRESSIONS.

     WHILE BT AND I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L4;
     END LOOP;
     FAILED ("DYNAMIC LOGICAL EXPRESSION TRUE CONDITION");
<<L4>> NULL;

     WHILE BT AND THEN I9 > 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L5;
     END LOOP;
     FAILED ("DYNAMIC LOGICAL EXPRESSION2 TRUE CONDITION");
<<L5>> NULL;

     WHILE BT OR ELSE I9 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L6;
     END LOOP;
     FAILED ("DYNAMIC LOGICAL EXPRESSION3 TRUE CONDITION");
<<L6>> NULL;

     WHILE BF OR ELSE I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L7;
     END LOOP;
     FAILED ("DYNAMIC LOGICAL EXPRESSION4 TRUE CONDITION");
<<L7>> NULL;

     WHILE I1 < 5 AND BF LOOP  -- (FALSE)
          FAILED ("DYNAMIC LOGICAL EXPRESSION FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF AND I1 < 5 LOOP  -- (FALSE)
          FAILED ("DYNAMIC LOGICAL EXPRESSION2 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BT AND THEN I9 < 5 LOOP  -- (FALSE)
          FAILED ("DYNAMIC LOGICAL EXPRESSION3 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE I9 < 5 AND THEN BT LOOP  -- (FALSE)
          FAILED ("DYNAMIC LOGICAL EXPRESSION4 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF OR ELSE I1 > 5 LOOP  -- (FALSE)
          FAILED ("DYNAMIC LOGICAL EXPRESSION5 FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK COMPLEX EXPRESSIONS.

     WHILE (BT OR (BF AND I9 > 5)) AND THEN I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L8;
     END LOOP;
     FAILED ("DYNAMIC COMPLEX EXPRESSION TRUE CONDITION");
<<L8>> NULL;

     WHILE (BF OR ELSE (BT AND THEN I1 < 5)) AND I9 > 5 LOOP -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L9;
     END LOOP;
     FAILED ("DYNAMIC COMPLEX EXPRESSION2 TRUE CONDITION");
<<L9>> NULL;

     WHILE NOT BT OR (BT AND I1 > 5) LOOP  -- (FALSE)
          FAILED ("DYNAMIC COMPLEX EXPRESSION FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE (BF OR ELSE (I1 < 5 AND NOT BF)) AND I9 < 5 LOOP -- (FALSE)
          FAILED ("DYNAMIC COMPLEX EXPRESSION2 FALSE CONDITION");
          EXIT;
     END LOOP;

     IF FLOW_COUNT /= 9 THEN
          FAILED ("INCORRECT FLOW_COUNT VALUE");
     END IF;

     RESULT;
END C55C03B;
