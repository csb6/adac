-- C45504B.DEP

-- OBJECTIVE:
--      CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR IS RAISED WHEN
--      A PRODUCT LIES OUTSIDE THE RANGE OF THE BASE TYPE, IF
--      THE OPERANDS ARE OF PREDEFINED TYPE SHORT_INTEGER.

-- APPLICABILITY CRITERIA:
--      THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS THAT SUPPORT
--      THE PREDEFINED TYPE "SHORT_INTEGER".

--      IF SUCH A TYPE IS NOT SUPPORTED, THEN THE DECLARATION OF
--      THE VARIABLE "F" MUST BE REJECTED.

-- HISTORY:
--      RJW 09/01/86  CREATED ORIGINAL TEST.
--      JET 12/30/87  UPDATED HEADER FORMAT AND ADDED CODE TO
--                    DEFEAT OPTIMIZATION.

WITH REPORT; USE REPORT;
PROCEDURE C45504B IS

     F : SHORT_INTEGER;                -- N/A => ERROR.
     L : SHORT_INTEGER;

     FUNCTION IDENT_SHORT(A : SHORT_INTEGER) RETURN SHORT_INTEGER IS
     BEGIN
          IF EQUAL (3,3) THEN
               RETURN A;
          ELSE
               RETURN 0;
          END IF;
     END IDENT_SHORT;

     FUNCTION SHORT_OK(X : SHORT_INTEGER) RETURN BOOLEAN IS
     BEGIN
          RETURN X = IDENT_SHORT(X);
     END SHORT_OK;

BEGIN
     TEST ( "C45504B", "CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR " &
                       "IS RAISED WHEN A PRODUCT LIES OUTSIDE THE " &
                       "RANGE OF THE BASE TYPE, IF THE OPERANDS ARE " &
                       "OF PREDEFINED TYPE SHORT_INTEGER" );

     F := IDENT_SHORT(SHORT_INTEGER'FIRST);
     L := IDENT_SHORT(SHORT_INTEGER'LAST);

     BEGIN
          IF SHORT_OK (F*L) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'F * L' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'F * L' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'F * L'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'F * L'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'F * L'" );
     END;

     BEGIN
          IF SHORT_OK (F * F) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'F * F' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'F * F' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'F * F'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'F * F'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'F * F'" );
     END;

     BEGIN
          IF SHORT_OK (L * L) THEN
               FAILED ( "NO EXCEPTION RAISED BY 'L * L' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'L * L' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'L * L'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'L * L'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'L * L'" );
     END;

     RESULT;

END C45504B;
