-- C24201A.TST

-- OBJECTIVE:
--     CHECK THAT A BASED INTEGER LITERAL ALWAYS YIELDS A NON-NEGATIVE
--     VALUE.

-- MACRO SUBSTITUTION:
--     $NEG_BASED_INT
--     A BASED INTEGER LITERAL (PREFERABLY BASE 8 OR 16) WHOSE HIGHEST
--     ORDER NON-ZERO BIT WOULD FALL IN THE SIGN BIT POSITION OF THE
--     REPRESENTATION FOR SYSTEM.MAX_INT, I.E., AN ATTEMPT TO WRITE A
--     NEGATIVE VALUED LITERAL SUCH AS -2 BY TAKING ADVANTAGE OF THE
--     BIT REPRESENTATION.

-- HISTORY:
--     JRK 12/12/79  CREATED ORIGINAL TEST.
--     JRK 12/17/80
--     SPS 12/13/82
--     JBG 12/16/82
--     JBG 5/4/83
--     JRK 3/26/84
--     EG  10/24/85  FIX NUMERIC_ERROR/CONSTRAINT_ERROR ACCORDING TO
--                   AI-00387.
--     LB   7/23/86  CHANGE ALL COMMENTS SO THAT THEY INCLUDE THE
--                   POSSIBILITY OF CONSTRAINT_ERROR BEING RAISED.
--     TLB 10/29/87  RENAMED FROM E24101A.TST.
--     PWB 05/19/89  REMOVED INDICATIONS THAT THE TEST COULD BE
--                   REJECTED AT COMPILE TIME; RENAMED FROM E24201A.TST.

WITH SYSTEM;
WITH REPORT; USE REPORT;
PROCEDURE C24201A IS

BEGIN
     TEST ("C24201A", "BASED INTEGER LITERALS ARE ALWAYS " &
                      "NON-NEGATIVE");

     DECLARE

          TYPE LONGEST_INTEGER IS
                    RANGE SYSTEM.MIN_INT .. SYSTEM.MAX_INT;

          LI : LONGEST_INTEGER;

          BEGIN

               LI := $NEG_BASED_INT;

               FAILED ("NO EXCEPTION RAISED FOR " &
                       "OUT-OF-RANGE LITERAL");

          EXCEPTION
               WHEN NUMERIC_ERROR | CONSTRAINT_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ("WRONG EXCEPTION RAISED");
          END;

          RESULT;

END C24201A;
