-- C45504E.DEP

-- OBJECTIVE:
--     CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR IS RAISED WHEN THE
--     SECOND OPERAND OF '/', 'MOD', OR 'REM' EQUALS ZERO, IF THE
--     OPERANDS ARE OF PREDEFINED TYPE SHORT_INTEGER.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE TO THOSE IMPLEMENTATIONS WHICH SUPPORT
--     SHORT_INTEGER.

--     IF "SHORT_INTEGER" IS NOT SUPPORTED, THEN THE DECLARATION OF
--     "CHECK_SHORT" MUST BE REJECTED.

-- HISTORY:
--     RJW 09/01/86 CREATED ORIGINAL TEST.
--     DHH 01/13/88 ADDED APPLICABILITY CRITERIA AND STANDARD HEADER.

WITH REPORT; USE REPORT;
PROCEDURE C45504E IS

     CHECK_SHORT : SHORT_INTEGER;                   -- N/A => ERROR.

     I0 : SHORT_INTEGER;
     I5 : SHORT_INTEGER;
     N5 : SHORT_INTEGER;

BEGIN
     TEST ( "C45504E", "CHECK THAT NUMERIC_ERROR/CONSTRAINT_ERROR " &
                       "IS RAISED WHEN THE SECOND OPERAND OF '/', " &
                       "'MOD', OR 'REM' EQUALS ZERO, IF THE " &
                       "OPERANDS ARE OF PREDEFINED TYPE " &
                       "SHORT_INTEGER" );

     IF EQUAL (3, 3) THEN
          I0 := 0;
          I5 := 5;
          N5 := -5;
     END IF;

     BEGIN
          IF I5 / I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 / I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 / I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 / I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 / I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 / I0'" );
     END;

     BEGIN
          IF N5 / I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'N5 / I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'N5 / I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'N5 / I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'N5 / I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'N5 / I0'" );
     END;

     BEGIN
          IF I0 / I0  = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I0 / I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I0 / I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I0 / I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I0 / I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I0 / I0'" );
     END;

     BEGIN
          IF I5 / I0 * I0  = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 / I0 * I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 / I0 * I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 / I0 * I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 / I0 * I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 / I0 * I0'" );
     END;

     BEGIN
          IF I5 MOD I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 MOD I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 MOD I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 MOD I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 MOD I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 MOD I0'" );
     END;

     BEGIN
          IF N5 MOD I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'N5 MOD I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'N5 MOD I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'N5 MOD I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'N5 MOD I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'N5 MOD I0'" );
     END;

     BEGIN
          IF I0 MOD I0  = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I0 MOD I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I0 MOD I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I0 MOD I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I0 MOD I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I0 MOD I0'" );
     END;

     BEGIN
          IF I5 MOD I0 = (I5 + I0) MOD I0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 MOD I0 = " &
                        "(I5 + I0) MOD I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 MOD I0 = " &
                        "(I5 + I0) MOD I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 MOD I0 = " &
                         "(I5 + I0) MOD I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 MOD I0 = " &
                         "(I5 + I0) MOD I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 MOD I0 = " &
                         "(I5 + I0) MOD I0'" );
     END;

     BEGIN
          IF I5 REM I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 REM I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 REM I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 REM I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 REM I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 REM I0'" );
     END;

     BEGIN
          IF N5 REM I0 = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'N5 REM I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'N5 REM I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'N5 REM I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'N5 REM I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'N5 REM I0'" );
     END;

     BEGIN
          IF I0 REM I0  = 0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I0 REM I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I0 REM I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I0 REM I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I0 REM I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I0 REM I0'" );
     END;

     BEGIN
          IF I5 REM (-I0) = I5 REM I0 THEN
               FAILED ( "NO EXCEPTION RAISED BY 'I5 REM (-I0) = " &
                        "I5 REM I0' - 1" );
          ELSE
               FAILED ( "NO EXCEPTION RAISED BY 'I5 REM (-I0) = " &
                        "I5 REM I0' - 2" );
          END IF;
     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               COMMENT ( "CONSTRAINT_ERROR RAISED BY 'I5 REM (-I0) " &
                         "= I5 REM I0'" );
          WHEN NUMERIC_ERROR =>
               COMMENT ( "NUMERIC_ERROR RAISED BY 'I5 REM (-I0) = " &
                         "I5 REM I0'" );
          WHEN OTHERS =>
               FAILED ( "WRONG EXCEPTION RAISED BY 'I5 REM (-I0) = " &
                         "I5 REM I0'" );
     END;

     RESULT;
END C45504E;
