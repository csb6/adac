-- C55C03A.ADA

-- CHECK THAT THE WHILE EXPRESSION MAY BE ARBITRARILY
--    COMPLICATED FOR STATIC EXPRESSIONS.

-- DLD 8/05/82

WITH REPORT; USE REPORT;
PROCEDURE C55C03A IS

     I1 : CONSTANT INTEGER := 1;
     I9 : CONSTANT INTEGER := 9;
     BT : CONSTANT BOOLEAN := TRUE;
     BF : CONSTANT BOOLEAN := FALSE;

     FLOW_COUNT : INTEGER := 0;

BEGIN
     TEST ("C55C03A", "CHECK THAT WHILE EXPRESSION " &
           "MAY BE ARBITRARILY COMPLICATED FOR " &
           "STATIC EXPRESSIONS");

     -- CHECK SIMPLE BOOLEAN.

     WHILE TRUE LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L1;
     END LOOP;
     FAILED ("STATIC BOOLEAN LITERAL TRUE CONDITION");
<<L1>> NULL;

     WHILE BT LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L2;
     END LOOP;
     FAILED ("STATIC BOOLEAN CONSTANT TRUE CONDITION");
<<L2>> NULL;

     WHILE FALSE LOOP  -- (FALSE)
          FAILED ("STATIC BOOLEAN LITERAL FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF LOOP  -- (FALSE)
          FAILED ("STATIC BOOLEAN CONSTANT FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK SIMPLE RELATION.

     WHILE I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L3;
     END LOOP;
     FAILED ("STATIC SIMPLE RELATION TRUE CONDITION");
<<L3>> NULL;

     WHILE 5 > I9 LOOP  -- (FALSE)
          FAILED ("STATIC SIMPLE RELATION FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK LOGICAL EXPRESSIONS.

     WHILE BT AND I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L4;
     END LOOP;
     FAILED ("STATIC LOGICAL EXPRESSION TRUE CONDITION");
<<L4>> NULL;

     WHILE BT AND THEN I9 > 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L5;
     END LOOP;
     FAILED ("STATIC LOGICAL EXPRESSION2 TRUE CONDITION");
<<L5>> NULL;

     WHILE BT OR ELSE I9 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L6;
     END LOOP;
     FAILED ("STATIC LOGICAL EXPRESSION3 TRUE CONDITION");
<<L6>> NULL;

     WHILE BF OR ELSE I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L7;
     END LOOP;
     FAILED ("STATIC LOGICAL EXPRESSION4 TRUE CONDITION");
<<L7>> NULL;

     WHILE I1 < 5 AND BF LOOP  -- (FALSE)
          FAILED ("STATIC LOGICAL EXPRESSION FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF AND I1 < 5 LOOP  -- (FALSE)
          FAILED ("STATIC LOGICAL EXPRESSION2 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BT AND THEN I9 < 5 LOOP  -- (FALSE)
          FAILED ("STATIC LOGICAL EXPRESSION3 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE I9 < 5 AND THEN BT LOOP  -- (FALSE)
          FAILED ("STATIC LOGICAL EXPRESSION4 FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE BF OR ELSE I1 > 5 LOOP  -- (FALSE)
          FAILED ("STATIC LOGICAL EXPRESSION5 FALSE CONDITION");
          EXIT;
     END LOOP;

     -- CHECK COMPLEX EXPRESSIONS.

     WHILE (BT OR (BF AND I9 > 5)) AND THEN I1 < 5 LOOP  -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L8;
     END LOOP;
     FAILED ("STATIC COMPLEX EXPRESSION TRUE CONDITION");
<<L8>> NULL;

     WHILE (BF OR ELSE (BT AND THEN I1 < 5)) AND I9 > 5 LOOP -- (TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
          GOTO L9;
     END LOOP;
     FAILED ("STATIC COMPLEX EXPRESSION2 TRUE CONDITION");
<<L9>> NULL;

     WHILE NOT BT OR (BT AND I1 > 5) LOOP  -- (FALSE)
          FAILED ("STATIC COMPLEX EXPRESSION FALSE CONDITION");
          EXIT;
     END LOOP;

     WHILE (BF OR ELSE (I1 < 5 AND NOT BF)) AND I9 < 5 LOOP -- (FALSE)
          FAILED ("STATIC COMPLEX EXPRESSION2 FALSE CONDITION");
          EXIT;
     END LOOP;

     IF FLOW_COUNT /= 9 THEN
          FAILED ("INCORRECT FLOW_COUNT VALUE");
     END IF;

     RESULT;
END C55C03A;
