-- CD4051D.ADA

-- OBJECTIVE:
--     CHECK THAT A RECORD REPRESENTATION CLAUSE CAN BE GIVEN FOR
--     A DERIVED SUBTYPE WHOSE PARENT TYPE IS A RECORD TYPE WITH
--     VARIANTS AND THE REPRESENTATION CLAUSE MENTIONS COMPONENTS THAT
--     DO NOT EXIST IN THE DERIVED SUBTYPE.

-- HISTORY:
--     RJW 08/25/87  CREATED ORIGINAL TEST.
--     DHH 03/27/89  CHANGED EXTENSION FROM '.DEP' TO '.ADA' AND
--                   ADDED CHECK FOR REPRESENTATION CLAUSE.

WITH REPORT; USE REPORT;
WITH LENGTH_CHECK;                      -- CONTAINS A CALL TO 'FAILED'.
WITH SYSTEM;
PROCEDURE CD4051D IS

     TYPE INT IS RANGE -4 .. 3;
     TYPE LARGE_INT IS RANGE -8 .. 7;

     TYPE BASIC_CLAUSE (DISC : BOOLEAN) IS RECORD
          BOOL_COMP   : BOOLEAN;
          CASE DISC IS
               WHEN FALSE =>
                    INT_COMP  : LARGE_INT;
               WHEN TRUE  =>
                    CH_COMP_1 : INT;
                    CH_COMP_2 : INT;
          END CASE;
     END RECORD;

     TYPE CHECK_CLAUSE IS NEW BASIC_CLAUSE (TRUE);

     FOR CHECK_CLAUSE USE
          RECORD
               DISC AT 0
                           RANGE 0 .. 0;
               BOOL_COMP AT 0
                           RANGE 1 .. 1;
               INT_COMP AT 0
                           RANGE 2 .. 5;
               CH_COMP_1 AT 0
                           RANGE 2 .. 4;
               CH_COMP_2 AT 0
                           RANGE 5 .. 7;
          END RECORD;

     PROCEDURE REC_LEN1 IS NEW LENGTH_CHECK (CHECK_CLAUSE);
     CHECK_RECORD : CHECK_CLAUSE := (TRUE, TRUE, -2, -2);

BEGIN
     TEST ("CD4051D", "CHECK THAT A RECORD REPRESENTATION " &
                      "CLAUSE CAN BE GIVEN FOR A DERIVED TYPE " &
                      "WHOSE PARENT TYPE IS A RECORD TYPE " &
                      "WITH VARIANTS AND WHERE THE RECORD " &
                      "REPRESENTATION CLAUSE MENTIONS COMPONENTS " &
                      "THAT DO NOT EXIST IN THE DERIVED SUBTYPE");

     REC_LEN1 (CHECK_RECORD, 8, "CHECK_RECORD");

     IF CHECK_RECORD.DISC'FIRST_BIT /= 0 THEN
          FAILED ("INCORRECT VALUE FOR FIRST_BIT OF DISC");
     END IF;

     IF CHECK_RECORD.DISC'LAST_BIT /= 0 THEN
          FAILED ("INCORRECT VALUE FOR LAST_BIT OF DISC");
     END IF;

     IF CHECK_RECORD.DISC'POSITION /= IDENT_INT (0) THEN
          FAILED ("INCORRECT VALUE FOR POSITION OF DISC");
     END IF;

     IF CHECK_RECORD.BOOL_COMP'FIRST_BIT /= 1 THEN
          FAILED ("INCORRECT VALUE FOR FIRST_BIT OF BOOL_COMP");
     END IF;

     IF CHECK_RECORD.BOOL_COMP'LAST_BIT /= 1 THEN
          FAILED ("INCORRECT VALUE FOR LAST_BIT OF BOOL_COMP");
     END IF;

     IF CHECK_RECORD.BOOL_COMP'POSITION /= 0 THEN
          FAILED ("INCORRECT VALUE FOR POSITION OF BOOL_COMP");
     END IF;

     IF CHECK_RECORD.CH_COMP_1'FIRST_BIT /= 2 THEN
          FAILED ("INCORRECT VALUE FOR FIRST_BIT OF CH_COMP_1");
     END IF;

     IF CHECK_RECORD.CH_COMP_1'LAST_BIT /= 4 THEN
          FAILED ("INCORRECT VALUE FOR LAST_BIT OF CH_COMP_1");
     END IF;

     IF CHECK_RECORD.CH_COMP_1'POSITION /= 0 THEN
          FAILED ("INCORRECT VALUE FOR POSITION OF CH_COMP_1");
     END IF;

     IF CHECK_RECORD.CH_COMP_2'FIRST_BIT /= 5 THEN
          FAILED ("INCORRECT VALUE FOR FIRST_BIT OF CH_COMP_2");
     END IF;

     IF CHECK_RECORD.CH_COMP_2'LAST_BIT /= 7 THEN
          FAILED ("INCORRECT VALUE FOR LAST_BIT OF CH_COMP_2");
     END IF;

     IF CHECK_RECORD.CH_COMP_2'POSITION /= 0 THEN
          FAILED ("INCORRECT VALUE FOR POSITION OF CH_COMP_2");
     END IF;

     RESULT;
END CD4051D;
