-- C35A06O.ADA

-- OBJECTIVE:
--     CHECK THAT FOR FIXED POINT TYPES THE SAFE_SMALL AND SAFE_LARGE
--     ATTRIBUTES YIELD APPROPRIATE VALUES.

--     CASE O: 'MANTISSA = SYSTEM.MAX_MANTISSA, FOR GENERICS.

-- HISTORY:
--     WRG 8/25/86  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;
WITH SYSTEM; USE SYSTEM;
PROCEDURE C35A06O IS

     MM            : CONSTANT := MAX_MANTISSA;
     FLOOR_MM_HALF : CONSTANT := MM / 2;
     CEIL_MM_HALF  : CONSTANT := MM - FLOOR_MM_HALF;

     -- THE NAME OF EACH TYPE OR SUBTYPE ENDS WITH THAT TYPE'S
     -- 'MANTISSA VALUE.

     TYPE LEFT_OUT_MM    IS
          DELTA 2.0 ** (-(MM+1))
          RANGE -(2.0 ** (-1) ) .. 2.0 ** (-1);
     TYPE LEFT_EDGE_MM   IS
          DELTA 2.0 ** (-MM)
          RANGE -1.0 .. 1.0;
     TYPE MIDDLE_MM      IS
          DELTA 2.0 ** (-CEIL_MM_HALF)
          RANGE -(2.0 ** FLOOR_MM_HALF) .. 2.0 ** FLOOR_MM_HALF;
     TYPE RIGHT_EDGE_MM  IS
          DELTA 1.0
          RANGE -(2.0 ** MM) .. 2.0 ** MM;
     TYPE RIGHT_OUT_MM   IS
          DELTA 2.0
          RANGE -(2.0 ** (MM+1)) .. 2.0 ** (MM+1);

     -------------------------------------------------------------------

     TYPE LEFT_OUT_MM_BASE           IS DELTA LEFT_OUT_MM'SAFE_SMALL
          RANGE -LEFT_OUT_MM'SAFE_LARGE   .. LEFT_OUT_MM'SAFE_LARGE;
     TYPE LEFT_EDGE_MM_BASE          IS DELTA LEFT_EDGE_MM'SAFE_SMALL
          RANGE -LEFT_EDGE_MM'SAFE_LARGE  .. LEFT_EDGE_MM'SAFE_LARGE;
     TYPE MIDDLE_MM_BASE             IS DELTA MIDDLE_MM'SAFE_SMALL
          RANGE -MIDDLE_MM'SAFE_LARGE     .. MIDDLE_MM'SAFE_LARGE;
     TYPE RIGHT_EDGE_MM_BASE         IS DELTA RIGHT_EDGE_MM'SAFE_SMALL
          RANGE -RIGHT_EDGE_MM'SAFE_LARGE .. RIGHT_EDGE_MM'SAFE_LARGE;
     TYPE RIGHT_OUT_MM_BASE          IS DELTA RIGHT_OUT_MM'SAFE_SMALL
          RANGE -RIGHT_OUT_MM'SAFE_LARGE  .. RIGHT_OUT_MM'SAFE_LARGE;

     -------------------------------------------------------------------

     SUBTYPE ST_LEFT_OUT_MM_LESS_1 IS LEFT_OUT_MM
          DELTA 2.0 ** (-MM);
               -- 'MANTISSA = MM - 1.
     SUBTYPE ST_LEFT_OUT_MM_HALF   IS LEFT_EDGE_MM
          DELTA 2.0 ** (-MM)
          RANGE LEFT_EDGE_MM ( -(2.0 ** (-FLOOR_MM_HALF)) ) ..
                IDENT_INT (1) * LEFT_EDGE_MM ( 2.0 ** (-FLOOR_MM_HALF));
               -- 'MANTISSA = CEIL_MM_HALF.
     SUBTYPE ST_RIGHT_EDGE_MM_HALF IS MIDDLE_MM
          DELTA 1.0;
               -- 'MANTISSA = FLOOR_MM_HALF.
     SUBTYPE ST_RIGHT_OUT_MM_HALF  IS RIGHT_EDGE_MM
          DELTA 2.0 ** FLOOR_MM_HALF;
               -- 'MANTISSA = CEIL_MM_HALF.
     SUBTYPE ST_RIGHT_OUT_M1       IS RIGHT_OUT_MM
          DELTA 2.0 RANGE -4.0 .. 4.0;
               -- 'MANTISSA = 1.

     -------------------------------------------------------------------

     GENERIC
          TYPE T IS DELTA <>;
          TYPE B IS DELTA <>;
     PROCEDURE CHECK_ATTRIBUTES (NAME : STRING;
                                 SAFE_SMALL, SAFE_LARGE : B);

     PROCEDURE CHECK_ATTRIBUTES (NAME : STRING;
                                 SAFE_SMALL, SAFE_LARGE : B) IS
     BEGIN
          IF T'SAFE_SMALL /= T'BASE'SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SMALL VALUE FOR " & NAME);
          END IF;

          IF T'SAFE_LARGE /= T'BASE'LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'LARGE VALUE FOR " & NAME);
          END IF;

          IF T'SAFE_SMALL /= T'BASE'SAFE_SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SAFE_SMALL VALUE FOR " &
                       NAME);
          END IF;

          IF T'SAFE_LARGE /= T'BASE'SAFE_LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= GENERIC 'BASE'SAFE_LARGE VALUE FOR " &
                       NAME);
          END IF;

          IF T'SMALL < T'BASE'SAFE_SMALL THEN
               FAILED ("GENERIC 'SMALL VALUE FOR " & NAME &
                       " < GENERIC 'BASE'SAFE_SMALL FOR " & NAME);
          END IF;

          IF T'LARGE > T'BASE'SAFE_LARGE THEN
               FAILED ("GENERIC 'LARGE VALUE FOR " & NAME &
                       " > GENERIC 'BASE'SAFE_LARGE FOR " & NAME);
          END IF;

          IF T'SAFE_SMALL /= SAFE_SMALL THEN
               FAILED ("GENERIC 'SAFE_SMALL VALUE FOR " & NAME &
                       " /= " & NAME & "'SAFE_SMALL");
          END IF;

          IF T'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("GENERIC 'SAFE_LARGE VALUE FOR " & NAME &
                       " /= " & NAME & "'SAFE_LARGE");
          END IF;
     END CHECK_ATTRIBUTES;

     -------------------------------------------------------------------

     PROCEDURE CHECK_LEFT_OUT_MM
          IS NEW CHECK_ATTRIBUTES (LEFT_OUT_MM,   LEFT_OUT_MM_BASE);
     PROCEDURE CHECK_LEFT_EDGE_MM
          IS NEW CHECK_ATTRIBUTES (LEFT_EDGE_MM,  LEFT_EDGE_MM_BASE);
     PROCEDURE CHECK_MIDDLE_MM
          IS NEW CHECK_ATTRIBUTES (MIDDLE_MM,     MIDDLE_MM_BASE);
     PROCEDURE CHECK_RIGHT_EDGE_MM
          IS NEW CHECK_ATTRIBUTES (RIGHT_EDGE_MM, RIGHT_EDGE_MM_BASE);
     PROCEDURE CHECK_RIGHT_OUT_MM
          IS NEW CHECK_ATTRIBUTES (RIGHT_OUT_MM,  RIGHT_OUT_MM_BASE);
     PROCEDURE CHECK_ST_LEFT_OUT_MM_LESS_1
          IS NEW CHECK_ATTRIBUTES (ST_LEFT_OUT_MM_LESS_1,
                                   LEFT_OUT_MM_BASE);
     PROCEDURE CHECK_ST_LEFT_OUT_MM_HALF
          IS NEW CHECK_ATTRIBUTES (ST_LEFT_OUT_MM_HALF,
                                   LEFT_EDGE_MM_BASE);
     PROCEDURE CHECK_ST_RIGHT_EDGE_MM_HALF
          IS NEW CHECK_ATTRIBUTES (ST_RIGHT_EDGE_MM_HALF,
                                   MIDDLE_MM_BASE);
     PROCEDURE CHECK_ST_RIGHT_OUT_MM_HALF
          IS NEW CHECK_ATTRIBUTES (ST_RIGHT_OUT_MM_HALF,
                                   RIGHT_EDGE_MM_BASE);
     PROCEDURE CHECK_ST_RIGHT_OUT_M1
          IS NEW CHECK_ATTRIBUTES (ST_RIGHT_OUT_M1, RIGHT_OUT_MM_BASE);

BEGIN

     TEST ("C35A06O", "CHECK THAT FOR FIXED POINT TYPES THE " &
                      "SAFE_SMALL AND SAFE_LARGE ATTRIBUTES YIELD " &
                      "APPROPRIATE VALUES - 'MANTISSA = " &
                      "SYSTEM.MAX_MANTISSA");

     COMMENT ("VALUE OF SYSTEM.MAX_MANTISSA IS" &
              POSITIVE'IMAGE(MAX_MANTISSA));

     CHECK_LEFT_OUT_MM   ("LEFT_OUT_MM",
            LEFT_OUT_MM'SAFE_SMALL,   LEFT_OUT_MM'SAFE_LARGE);
     CHECK_LEFT_EDGE_MM  ("LEFT_EDGE_MM",
            LEFT_EDGE_MM'SAFE_SMALL,  LEFT_EDGE_MM'SAFE_LARGE);
     CHECK_MIDDLE_MM     ("MIDDLE_MM",
            MIDDLE_MM'SAFE_SMALL,     MIDDLE_MM'SAFE_LARGE);
     CHECK_RIGHT_EDGE_MM ("RIGHT_EDGE_MM",
            RIGHT_EDGE_MM'SAFE_SMALL, RIGHT_EDGE_MM'SAFE_LARGE);
     CHECK_RIGHT_OUT_MM  ("RIGHT_OUT_MM",
            RIGHT_OUT_MM'SAFE_SMALL,  RIGHT_OUT_MM'SAFE_LARGE);

     CHECK_ST_LEFT_OUT_MM_LESS_1 ("ST_LEFT_OUT_MM_LESS_1",
            ST_LEFT_OUT_MM_LESS_1'SAFE_SMALL,
            ST_LEFT_OUT_MM_LESS_1'SAFE_LARGE);
     CHECK_ST_LEFT_OUT_MM_HALF   ("ST_LEFT_OUT_MM_HALF",
            ST_LEFT_OUT_MM_HALF'SAFE_SMALL,
            ST_LEFT_OUT_MM_HALF'SAFE_LARGE);
     CHECK_ST_RIGHT_EDGE_MM_HALF ("ST_RIGHT_EDGE_MM_HALF",
            ST_RIGHT_EDGE_MM_HALF'SAFE_SMALL,
            ST_RIGHT_EDGE_MM_HALF'SAFE_LARGE);
     CHECK_ST_RIGHT_OUT_MM_HALF  ("ST_RIGHT_OUT_MM_HALF",
            ST_RIGHT_OUT_MM_HALF'SAFE_SMALL,
            ST_RIGHT_OUT_MM_HALF'SAFE_LARGE);
     CHECK_ST_RIGHT_OUT_M1       ("ST_RIGHT_OUT_M1",
            ST_RIGHT_OUT_M1'SAFE_SMALL,
            ST_RIGHT_OUT_M1'SAFE_LARGE);

     RESULT;

END C35A06O;
