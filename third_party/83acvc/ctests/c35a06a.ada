-- C35A06A.ADA

-- CHECK THAT FOR FIXED POINT TYPES THE SAFE_SMALL AND SAFE_LARGE
-- ATTRIBUTES YIELD APPROPRIATE VALUES.

-- CASE A: BASIC TYPES THAT FIT THE CHARACTERISTICS OF DURATION'BASE.

-- WRG 8/15/86

WITH REPORT; USE REPORT;
PROCEDURE C35A06A IS

     -- THE NAME OF EACH TYPE OR SUBTYPE ENDS WITH THAT TYPE'S
     -- 'MANTISSA VALUE.

     TYPE LEFT_OUT_M1       IS DELTA 0.25  RANGE -0.5 .. 0.5;
     TYPE LEFT_EDGE_M1      IS DELTA 0.5   RANGE -1.0 .. 1.0;
     TYPE RIGHT_EDGE_M1     IS DELTA 1.0   RANGE -2.0 .. 2.0;
     TYPE RIGHT_OUT_M1      IS DELTA 2.0   RANGE -4.0 .. 4.0;
     TYPE MIDDLE_M2         IS DELTA 0.5   RANGE -2.0 .. 2.0;
     TYPE MIDDLE_M3         IS DELTA 0.5   RANGE  0.0 .. 2.5;
     TYPE MIDDLE_M15        IS DELTA 2.0 **(-6) RANGE  -512.0 ..  512.0;
     TYPE MIDDLE_M16        IS DELTA 2.0 **(-6) RANGE -1024.0 .. 1024.0;
     TYPE LIKE_DURATION_M23 IS DELTA 0.020 RANGE -86_400.0 .. 86_400.0;
     TYPE DECIMAL_M18       IS DELTA 0.1   RANGE -10_000.0 .. 10_000.0;
     TYPE DECIMAL_M4        IS DELTA 100.0 RANGE   -1000.0 ..   1000.0;

     -------------------------------------------------------------------

     SUBTYPE ST_LEFT_EDGE_M6 IS MIDDLE_M15
          DELTA 2.0 ** (-6) RANGE IDENT_INT (1) * (-1.0) .. 1.0;
     SUBTYPE ST_MIDDLE_M14   IS MIDDLE_M16
          DELTA 2.0 ** (-5) RANGE -512.0 .. IDENT_INT (1) * 512.0;
     SUBTYPE ST_MIDDLE_M2    IS LIKE_DURATION_M23
          DELTA 0.5 RANGE -2.0 .. 2.0;
     SUBTYPE ST_MIDDLE_M3    IS LIKE_DURATION_M23
          DELTA 0.5 RANGE  0.0 .. 2.5;
     SUBTYPE ST_DECIMAL_M7   IS DECIMAL_M18
          DELTA  10.0 RANGE -1000.0 .. 1000.0;
     SUBTYPE ST_DECIMAL_M3   IS DECIMAL_M4
          DELTA 100.0 RANGE  -500.0 ..  500.0;

BEGIN

     TEST ("C35A06A", "CHECK THAT FOR FIXED POINT TYPES THE " &
                      "SAFE_SMALL AND SAFE_LARGE ATTRIBUTES YIELD " &
                      "APPROPRIATE VALUES - BASIC TYPES");

     -------------------------------------------------------------------

     IF LEFT_OUT_M1'SAFE_SMALL /= LEFT_OUT_M1'BASE'SMALL THEN
          FAILED ("LEFT_OUT_M1'SAFE_SMALL /= LEFT_OUT_M1'BASE'SMALL");
     END IF;
     IF LEFT_OUT_M1'SAFE_LARGE /= LEFT_OUT_M1'BASE'LARGE THEN
          FAILED ("LEFT_OUT_M1'SAFE_LARGE /= LEFT_OUT_M1'BASE'LARGE");
     END IF;
     IF LEFT_OUT_M1'SAFE_SMALL /= LEFT_OUT_M1'BASE'SAFE_SMALL THEN
          FAILED ("LEFT_OUT_M1'SAFE_SMALL /= " &
                  "LEFT_OUT_M1'BASE'SAFE_SMALL");
     END IF;
     IF LEFT_OUT_M1'SAFE_LARGE /= LEFT_OUT_M1'BASE'SAFE_LARGE THEN
          FAILED ("LEFT_OUT_M1'SAFE_LARGE /= " &
                  "LEFT_OUT_M1'BASE'SAFE_LARGE");
     END IF;
     IF LEFT_OUT_M1'SMALL < LEFT_OUT_M1'BASE'SAFE_SMALL THEN
          FAILED ("LEFT_OUT_M1'SMALL < LEFT_OUT_M1'BASE'SAFE_SMALL");
     END IF;
     IF LEFT_OUT_M1'LARGE > LEFT_OUT_M1'BASE'SAFE_LARGE THEN
          FAILED ("LEFT_OUT_M1'LARGE > LEFT_OUT_M1'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := LEFT_OUT_M1'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   LEFT_OUT_M1'SAFE_SMALL;
     BEGIN
          IF LEFT_OUT_M1'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("LEFT_OUT_M1'SAFE_LARGE /= " &
                       "(2.0 ** LEFT_OUT_M1'BASE'MANTISSA - 1.0) * " &
                       "LEFT_OUT_M1'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF LEFT_EDGE_M1'SAFE_SMALL /= LEFT_EDGE_M1'BASE'SMALL THEN
          FAILED ("LEFT_EDGE_M1'SAFE_SMALL /= LEFT_EDGE_M1'BASE'SMALL");
     END IF;
     IF LEFT_EDGE_M1'SAFE_LARGE /= LEFT_EDGE_M1'BASE'LARGE THEN
          FAILED ("LEFT_EDGE_M1'SAFE_LARGE /= LEFT_EDGE_M1'BASE'LARGE");
     END IF;
     IF LEFT_EDGE_M1'SAFE_SMALL /= LEFT_EDGE_M1'BASE'SAFE_SMALL THEN
          FAILED ("LEFT_EDGE_M1'SAFE_SMALL /= " &
                  "LEFT_EDGE_M1'BASE'SAFE_SMALL");
     END IF;
     IF LEFT_EDGE_M1'SAFE_LARGE /= LEFT_EDGE_M1'BASE'SAFE_LARGE THEN
          FAILED ("LEFT_EDGE_M1'SAFE_LARGE /= " &
                  "LEFT_EDGE_M1'BASE'SAFE_LARGE");
     END IF;
     IF LEFT_EDGE_M1'SMALL < LEFT_EDGE_M1'BASE'SAFE_SMALL THEN
          FAILED ("LEFT_EDGE_M1'SMALL < LEFT_EDGE_M1'BASE'SAFE_SMALL");
     END IF;
     IF LEFT_EDGE_M1'LARGE > LEFT_EDGE_M1'BASE'SAFE_LARGE THEN
          FAILED ("LEFT_EDGE_M1'LARGE > LEFT_EDGE_M1'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := LEFT_EDGE_M1'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   LEFT_EDGE_M1'SAFE_SMALL;
     BEGIN
          IF LEFT_EDGE_M1'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("LEFT_EDGE_M1'SAFE_LARGE /= " &
                       "(2.0 ** LEFT_EDGE_M1'BASE'MANTISSA - 1.0) * " &
                       "LEFT_EDGE_M1'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF RIGHT_EDGE_M1'SAFE_SMALL /= RIGHT_EDGE_M1'BASE'SMALL THEN
          FAILED ("RIGHT_EDGE_M1'SAFE_SMALL /= " &
                  "RIGHT_EDGE_M1'BASE'SMALL");
     END IF;
     IF RIGHT_EDGE_M1'SAFE_LARGE /= RIGHT_EDGE_M1'BASE'LARGE THEN
          FAILED ("RIGHT_EDGE_M1'SAFE_LARGE /= " &
                  "RIGHT_EDGE_M1'BASE'LARGE");
     END IF;
     IF RIGHT_EDGE_M1'SAFE_SMALL /= RIGHT_EDGE_M1'BASE'SAFE_SMALL THEN
          FAILED ("RIGHT_EDGE_M1'SAFE_SMALL /= " &
                  "RIGHT_EDGE_M1'BASE'SAFE_SMALL");
     END IF;
     IF RIGHT_EDGE_M1'SAFE_LARGE /= RIGHT_EDGE_M1'BASE'SAFE_LARGE THEN
          FAILED ("RIGHT_EDGE_M1'SAFE_LARGE /= " &
                  "RIGHT_EDGE_M1'BASE'SAFE_LARGE");
     END IF;
     IF RIGHT_EDGE_M1'SMALL < RIGHT_EDGE_M1'BASE'SAFE_SMALL THEN
          FAILED("RIGHT_EDGE_M1'SMALL < RIGHT_EDGE_M1'BASE'SAFE_SMALL");
     END IF;
     IF RIGHT_EDGE_M1'LARGE > RIGHT_EDGE_M1'BASE'SAFE_LARGE THEN
          FAILED("RIGHT_EDGE_M1'LARGE > RIGHT_EDGE_M1'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := RIGHT_EDGE_M1'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   RIGHT_EDGE_M1'SAFE_SMALL;
     BEGIN
          IF RIGHT_EDGE_M1'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("RIGHT_EDGE_M1'SAFE_LARGE /= " &
                       "(2.0 ** RIGHT_EDGE_M1'BASE'MANTISSA - 1.0) * " &
                       "RIGHT_EDGE_M1'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF RIGHT_OUT_M1'SAFE_SMALL /= RIGHT_OUT_M1'BASE'SMALL THEN
          FAILED ("RIGHT_OUT_M1'SAFE_SMALL /= RIGHT_OUT_M1'BASE'SMALL");
     END IF;
     IF RIGHT_OUT_M1'SAFE_LARGE /= RIGHT_OUT_M1'BASE'LARGE THEN
          FAILED ("RIGHT_OUT_M1'SAFE_LARGE /= RIGHT_OUT_M1'BASE'LARGE");
     END IF;
     IF RIGHT_OUT_M1'SAFE_SMALL /= RIGHT_OUT_M1'BASE'SAFE_SMALL THEN
          FAILED ("RIGHT_OUT_M1'SAFE_SMALL /= " &
                  "RIGHT_OUT_M1'BASE'SAFE_SMALL");
     END IF;
     IF RIGHT_OUT_M1'SAFE_LARGE /= RIGHT_OUT_M1'BASE'SAFE_LARGE THEN
          FAILED ("RIGHT_OUT_M1'SAFE_LARGE /= " &
                  "RIGHT_OUT_M1'BASE'SAFE_LARGE");
     END IF;
     IF RIGHT_OUT_M1'SMALL < RIGHT_OUT_M1'BASE'SAFE_SMALL THEN
          FAILED ("RIGHT_OUT_M1'SMALL < RIGHT_OUT_M1'BASE'SAFE_SMALL");
     END IF;
     IF RIGHT_OUT_M1'LARGE > RIGHT_OUT_M1'BASE'SAFE_LARGE THEN
          FAILED ("RIGHT_OUT_M1'LARGE > RIGHT_OUT_M1'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := RIGHT_OUT_M1'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   RIGHT_OUT_M1'SAFE_SMALL;
     BEGIN
          IF RIGHT_OUT_M1'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("RIGHT_OUT_M1'SAFE_LARGE /= " &
                       "(2.0 ** RIGHT_OUT_M1'BASE'MANTISSA - 1.0) * " &
                       "RIGHT_OUT_M1'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF MIDDLE_M2'SAFE_SMALL /= MIDDLE_M2'BASE'SMALL THEN
          FAILED ("MIDDLE_M2'SAFE_SMALL /= MIDDLE_M2'BASE'SMALL");
     END IF;
     IF MIDDLE_M2'SAFE_LARGE /= MIDDLE_M2'BASE'LARGE THEN
          FAILED ("MIDDLE_M2'SAFE_LARGE /= MIDDLE_M2'BASE'LARGE");
     END IF;
     IF MIDDLE_M2'SAFE_SMALL /= MIDDLE_M2'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M2'SAFE_SMALL /= MIDDLE_M2'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M2'SAFE_LARGE /= MIDDLE_M2'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M2'SAFE_LARGE /= MIDDLE_M2'BASE'SAFE_LARGE");
     END IF;
     IF MIDDLE_M2'SMALL < MIDDLE_M2'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M2'SMALL < MIDDLE_M2'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M2'LARGE > MIDDLE_M2'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M2'LARGE > MIDDLE_M2'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := MIDDLE_M2'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   MIDDLE_M2'SAFE_SMALL;
     BEGIN
          IF MIDDLE_M2'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("MIDDLE_M2'SAFE_LARGE /= " &
                       "(2.0 ** MIDDLE_M2'BASE'MANTISSA - 1.0) * " &
                       "MIDDLE_M2'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF MIDDLE_M3'SAFE_SMALL /= MIDDLE_M3'BASE'SMALL THEN
          FAILED ("MIDDLE_M3'SAFE_SMALL /= MIDDLE_M3'BASE'SMALL");
     END IF;
     IF MIDDLE_M3'SAFE_LARGE /= MIDDLE_M3'BASE'LARGE THEN
          FAILED ("MIDDLE_M3'SAFE_LARGE /= MIDDLE_M3'BASE'LARGE");
     END IF;
     IF MIDDLE_M3'SAFE_SMALL /= MIDDLE_M3'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M3'SAFE_SMALL /= MIDDLE_M3'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M3'SAFE_LARGE /= MIDDLE_M3'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M3'SAFE_LARGE /= MIDDLE_M3'BASE'SAFE_LARGE");
     END IF;
     IF MIDDLE_M3'SMALL < MIDDLE_M3'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M3'SMALL < MIDDLE_M3'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M3'LARGE > MIDDLE_M3'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M3'LARGE > MIDDLE_M3'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := MIDDLE_M3'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   MIDDLE_M3'SAFE_SMALL;
     BEGIN
          IF MIDDLE_M3'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("MIDDLE_M3'SAFE_LARGE /= " &
                       "(2.0 ** MIDDLE_M3'BASE'MANTISSA - 1.0) * " &
                       "MIDDLE_M3'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF MIDDLE_M15'SAFE_SMALL /= MIDDLE_M15'BASE'SMALL THEN
          FAILED ("MIDDLE_M15'SAFE_SMALL /= MIDDLE_M15'BASE'SMALL");
     END IF;
     IF MIDDLE_M15'SAFE_LARGE /= MIDDLE_M15'BASE'LARGE THEN
          FAILED ("MIDDLE_M15'SAFE_LARGE /= MIDDLE_M15'BASE'LARGE");
     END IF;
     IF MIDDLE_M15'SAFE_SMALL /= MIDDLE_M15'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M15'SAFE_SMALL /= " &
                  "MIDDLE_M15'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M15'SAFE_LARGE /= MIDDLE_M15'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M15'SAFE_LARGE /= " &
                  "MIDDLE_M15'BASE'SAFE_LARGE");
     END IF;
     IF MIDDLE_M15'SMALL < MIDDLE_M15'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M15'SMALL < MIDDLE_M15'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M15'LARGE > MIDDLE_M15'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M15'LARGE > MIDDLE_M15'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := MIDDLE_M15'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   MIDDLE_M15'SAFE_SMALL;
     BEGIN
          IF MIDDLE_M15'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("MIDDLE_M15'SAFE_LARGE /= " &
                       "(2.0 ** MIDDLE_M15'BASE'MANTISSA - 1.0) * " &
                       "MIDDLE_M15'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF MIDDLE_M16'SAFE_SMALL /= MIDDLE_M16'BASE'SMALL THEN
          FAILED ("MIDDLE_M16'SAFE_SMALL /= MIDDLE_M16'BASE'SMALL");
     END IF;
     IF MIDDLE_M16'SAFE_LARGE /= MIDDLE_M16'BASE'LARGE THEN
          FAILED ("MIDDLE_M16'SAFE_LARGE /= MIDDLE_M16'BASE'LARGE");
     END IF;
     IF MIDDLE_M16'SAFE_SMALL /= MIDDLE_M16'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M16'SAFE_SMALL /= " &
                  "MIDDLE_M16'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M16'SAFE_LARGE /= MIDDLE_M16'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M16'SAFE_LARGE /= " &
                  "MIDDLE_M16'BASE'SAFE_LARGE");
     END IF;
     IF MIDDLE_M16'SMALL < MIDDLE_M16'BASE'SAFE_SMALL THEN
          FAILED ("MIDDLE_M16'SMALL < MIDDLE_M16'BASE'SAFE_SMALL");
     END IF;
     IF MIDDLE_M16'LARGE > MIDDLE_M16'BASE'SAFE_LARGE THEN
          FAILED ("MIDDLE_M16'LARGE > MIDDLE_M16'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := MIDDLE_M16'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   MIDDLE_M16'SAFE_SMALL;
     BEGIN
          IF MIDDLE_M16'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("MIDDLE_M16'SAFE_LARGE /= " &
                       "(2.0 ** MIDDLE_M16'BASE'MANTISSA - 1.0) * " &
                       "MIDDLE_M16'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF LIKE_DURATION_M23'SAFE_SMALL /=LIKE_DURATION_M23'BASE'SMALL THEN
          FAILED ("LIKE_DURATION_M23'SAFE_SMALL /= " &
                  "LIKE_DURATION_M23'BASE'SMALL");
     END IF;
     IF LIKE_DURATION_M23'SAFE_LARGE /=LIKE_DURATION_M23'BASE'LARGE THEN
          FAILED ("LIKE_DURATION_M23'SAFE_LARGE /= " &
                  "LIKE_DURATION_M23'BASE'LARGE");
     END IF;
     IF LIKE_DURATION_M23'SAFE_SMALL /=
        LIKE_DURATION_M23'BASE'SAFE_SMALL THEN
          FAILED ("LIKE_DURATION_M23'SAFE_SMALL /= " &
                  "LIKE_DURATION_M23'BASE'SAFE_SMALL");
     END IF;
     IF LIKE_DURATION_M23'SAFE_LARGE /=
        LIKE_DURATION_M23'BASE'SAFE_LARGE THEN
          FAILED ("LIKE_DURATION_M23'SAFE_LARGE /= " &
                  "LIKE_DURATION_M23'BASE'SAFE_LARGE");
     END IF;
     IF LIKE_DURATION_M23'SMALL <
        LIKE_DURATION_M23'BASE'SAFE_SMALL THEN
          FAILED ("LIKE_DURATION_M23'SMALL < " &
                  "LIKE_DURATION_M23'BASE'SAFE_SMALL");
     END IF;
     IF LIKE_DURATION_M23'LARGE >
        LIKE_DURATION_M23'BASE'SAFE_LARGE THEN
          FAILED ("LIKE_DURATION_M23'LARGE > " &
                  "LIKE_DURATION_M23'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := LIKE_DURATION_M23'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   LIKE_DURATION_M23'SAFE_SMALL;
     BEGIN
          IF LIKE_DURATION_M23'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("LIKE_DURATION_M23'SAFE_LARGE /= " &
                       "(2.0 ** LIKE_DURATION_M23'BASE'MANTISSA -" &
                       " 1.0) * LIKE_DURATION_M23'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF DECIMAL_M18'SAFE_SMALL /= DECIMAL_M18'BASE'SMALL THEN
          FAILED ("DECIMAL_M18'SAFE_SMALL /= DECIMAL_M18'BASE'SMALL");
     END IF;
     IF DECIMAL_M18'SAFE_LARGE /= DECIMAL_M18'BASE'LARGE THEN
          FAILED ("DECIMAL_M18'SAFE_LARGE /= DECIMAL_M18'BASE'LARGE");
     END IF;
     IF DECIMAL_M18'SAFE_SMALL /= DECIMAL_M18'BASE'SAFE_SMALL THEN
          FAILED ("DECIMAL_M18'SAFE_SMALL /= " &
                  "DECIMAL_M18'BASE'SAFE_SMALL");
     END IF;
     IF DECIMAL_M18'SAFE_LARGE /= DECIMAL_M18'BASE'SAFE_LARGE THEN
          FAILED ("DECIMAL_M18'SAFE_LARGE /= " &
                  "DECIMAL_M18'BASE'SAFE_LARGE");
     END IF;
     IF DECIMAL_M18'SMALL < DECIMAL_M18'BASE'SAFE_SMALL THEN
          FAILED ("DECIMAL_M18'SMALL < DECIMAL_M18'BASE'SAFE_SMALL");
     END IF;
     IF DECIMAL_M18'LARGE > DECIMAL_M18'BASE'SAFE_LARGE THEN
          FAILED ("DECIMAL_M18'LARGE > DECIMAL_M18'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := DECIMAL_M18'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   DECIMAL_M18'SAFE_SMALL;
     BEGIN
          IF DECIMAL_M18'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("DECIMAL_M18'SAFE_LARGE /= " &
                       "(2.0 ** DECIMAL_M18'BASE'MANTISSA - 1.0) * " &
                       "DECIMAL_M18'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF DECIMAL_M4'SAFE_SMALL /= DECIMAL_M4'BASE'SMALL THEN
          FAILED ("DECIMAL_M4'SAFE_SMALL /= DECIMAL_M4'BASE'SMALL");
     END IF;
     IF DECIMAL_M4'SAFE_LARGE /= DECIMAL_M4'BASE'LARGE THEN
          FAILED ("DECIMAL_M4'SAFE_LARGE /= DECIMAL_M4'BASE'LARGE");
     END IF;
     IF DECIMAL_M4'SAFE_SMALL /= DECIMAL_M4'BASE'SAFE_SMALL THEN
          FAILED ("DECIMAL_M4'SAFE_SMALL /= " &
                  "DECIMAL_M4'BASE'SAFE_SMALL");
     END IF;
     IF DECIMAL_M4'SAFE_LARGE /= DECIMAL_M4'BASE'SAFE_LARGE THEN
          FAILED ("DECIMAL_M4'SAFE_LARGE /= " &
                  "DECIMAL_M4'BASE'SAFE_LARGE");
     END IF;
     IF DECIMAL_M4'SMALL < DECIMAL_M4'BASE'SAFE_SMALL THEN
          FAILED ("DECIMAL_M4'SMALL < DECIMAL_M4'BASE'SAFE_SMALL");
     END IF;
     IF DECIMAL_M4'LARGE > DECIMAL_M4'BASE'SAFE_LARGE THEN
          FAILED ("DECIMAL_M4'LARGE > DECIMAL_M4'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := DECIMAL_M4'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   DECIMAL_M4'SAFE_SMALL;
     BEGIN
          IF DECIMAL_M4'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("DECIMAL_M4'SAFE_LARGE /= " &
                       "(2.0 ** DECIMAL_M4'BASE'MANTISSA - 1.0) * " &
                       "DECIMAL_M4'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_LEFT_EDGE_M6'SAFE_SMALL /= ST_LEFT_EDGE_M6'BASE'SMALL THEN
          FAILED ("ST_LEFT_EDGE_M6'SAFE_SMALL /= " &
                  "ST_LEFT_EDGE_M6'BASE'SMALL");
     END IF;
     IF ST_LEFT_EDGE_M6'SAFE_LARGE /= ST_LEFT_EDGE_M6'BASE'LARGE THEN
          FAILED ("ST_LEFT_EDGE_M6'SAFE_LARGE /= " &
                  "ST_LEFT_EDGE_M6'BASE'LARGE");
     END IF;
     IF ST_LEFT_EDGE_M6'SAFE_SMALL /=
        ST_LEFT_EDGE_M6'BASE'SAFE_SMALL THEN
          FAILED ("ST_LEFT_EDGE_M6'SAFE_SMALL /= " &
                  "ST_LEFT_EDGE_M6'BASE'SAFE_SMALL");
     END IF;
     IF ST_LEFT_EDGE_M6'SAFE_LARGE /=
        ST_LEFT_EDGE_M6'BASE'SAFE_LARGE THEN
          FAILED ("ST_LEFT_EDGE_M6'SAFE_LARGE /= " &
                  "ST_LEFT_EDGE_M6'BASE'SAFE_LARGE");
     END IF;
     IF ST_LEFT_EDGE_M6'SMALL <
        ST_LEFT_EDGE_M6'BASE'SAFE_SMALL THEN
          FAILED ("ST_LEFT_EDGE_M6'SMALL < " &
                  "ST_LEFT_EDGE_M6'BASE'SAFE_SMALL");
     END IF;
     IF ST_LEFT_EDGE_M6'LARGE >
        ST_LEFT_EDGE_M6'BASE'SAFE_LARGE THEN
          FAILED ("ST_LEFT_EDGE_M6'LARGE > " &
                  "ST_LEFT_EDGE_M6'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_LEFT_EDGE_M6'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_LEFT_EDGE_M6'BASE'SAFE_SMALL;
     BEGIN
          IF ST_LEFT_EDGE_M6'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_LEFT_EDGE_M6'SAFE_LARGE /= " &
                       "(2.0 ** ST_LEFT_EDGE_M6'BASE'MANTISSA - 1.0) " &
                       "* ST_LEFT_EDGE_M6'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_MIDDLE_M14'SAFE_SMALL /= ST_MIDDLE_M14'BASE'SMALL THEN
          FAILED ("ST_MIDDLE_M14'SAFE_SMALL /=" &
                  "ST_MIDDLE_M14'BASE'SMALL");
     END IF;
     IF ST_MIDDLE_M14'SAFE_LARGE /= ST_MIDDLE_M14'BASE'LARGE THEN
          FAILED ("ST_MIDDLE_M14'SAFE_LARGE /=" &
                  "ST_MIDDLE_M14'BASE'LARGE");
     END IF;
     IF ST_MIDDLE_M14'SAFE_SMALL /= ST_MIDDLE_M14'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M14'SAFE_SMALL /= " &
                  "ST_MIDDLE_M14'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M14'SAFE_LARGE /= ST_MIDDLE_M14'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M14'SAFE_LARGE /= " &
                  "ST_MIDDLE_M14'BASE'SAFE_LARGE");
     END IF;
     IF ST_MIDDLE_M14'SMALL < ST_MIDDLE_M14'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M14'SMALL <" &
                  "ST_MIDDLE_M14'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M14'LARGE > ST_MIDDLE_M14'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M14'LARGE >" &
                  "ST_MIDDLE_M14'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_MIDDLE_M14'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_MIDDLE_M14'BASE'SAFE_SMALL;
     BEGIN
          IF ST_MIDDLE_M14'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_MIDDLE_M14'SAFE_LARGE /= " &
                       "(2.0 ** ST_MIDDLE_M14'BASE'MANTISSA - 1.0) * " &
                       "ST_MIDDLE_M14'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_MIDDLE_M2'SAFE_SMALL /= ST_MIDDLE_M2'BASE'SMALL THEN
          FAILED ("ST_MIDDLE_M2'SAFE_SMALL /= ST_MIDDLE_M2'BASE'SMALL");
     END IF;
     IF ST_MIDDLE_M2'SAFE_LARGE /= ST_MIDDLE_M2'BASE'LARGE THEN
          FAILED ("ST_MIDDLE_M2'SAFE_LARGE /= ST_MIDDLE_M2'BASE'LARGE");
     END IF;
     IF ST_MIDDLE_M2'SAFE_SMALL /= ST_MIDDLE_M2'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M2'SAFE_SMALL /= " &
                  "ST_MIDDLE_M2'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M2'SAFE_LARGE /= ST_MIDDLE_M2'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M2'SAFE_LARGE /= " &
                  "ST_MIDDLE_M2'BASE'SAFE_LARGE");
     END IF;
     IF ST_MIDDLE_M2'SMALL < ST_MIDDLE_M2'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M2'SMALL < ST_MIDDLE_M2'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M2'LARGE > ST_MIDDLE_M2'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M2'LARGE > ST_MIDDLE_M2'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_MIDDLE_M2'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_MIDDLE_M2'SAFE_SMALL;
     BEGIN
          IF ST_MIDDLE_M2'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_MIDDLE_M2'SAFE_LARGE /= " &
                       "(2.0 ** ST_MIDDLE_M2'BASE'MANTISSA - 1.0) * " &
                       "ST_MIDDLE_M2'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_MIDDLE_M3'SAFE_SMALL /= ST_MIDDLE_M3'BASE'SMALL THEN
          FAILED ("ST_MIDDLE_M3'SAFE_SMALL /= ST_MIDDLE_M3'BASE'SMALL");
     END IF;
     IF ST_MIDDLE_M3'SAFE_LARGE /= ST_MIDDLE_M3'BASE'LARGE THEN
          FAILED ("ST_MIDDLE_M3'SAFE_LARGE /= ST_MIDDLE_M3'BASE'LARGE");
     END IF;
     IF ST_MIDDLE_M3'SAFE_SMALL /= ST_MIDDLE_M3'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M3'SAFE_SMALL /= " &
                  "ST_MIDDLE_M3'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M3'SAFE_LARGE /= ST_MIDDLE_M3'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M3'SAFE_LARGE /= " &
                  "ST_MIDDLE_M3'BASE'SAFE_LARGE");
     END IF;
     IF ST_MIDDLE_M3'SMALL < ST_MIDDLE_M3'BASE'SAFE_SMALL THEN
          FAILED ("ST_MIDDLE_M3'SMALL < ST_MIDDLE_M3'BASE'SAFE_SMALL");
     END IF;
     IF ST_MIDDLE_M3'LARGE > ST_MIDDLE_M3'BASE'SAFE_LARGE THEN
          FAILED ("ST_MIDDLE_M3'LARGE > ST_MIDDLE_M3'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_MIDDLE_M3'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_MIDDLE_M3'SAFE_SMALL;
     BEGIN
          IF ST_MIDDLE_M3'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_MIDDLE_M3'SAFE_LARGE /= " &
                       "(2.0 ** ST_MIDDLE_M3'BASE'MANTISSA - 1.0) * " &
                       "ST_MIDDLE_M3'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_DECIMAL_M7'SAFE_SMALL /= ST_DECIMAL_M7'BASE'SMALL THEN
          FAILED ("ST_DECIMAL_M7'SAFE_SMALL /= " &
                  "ST_DECIMAL_M7'BASE'SMALL");
     END IF;
     IF ST_DECIMAL_M7'SAFE_LARGE /= ST_DECIMAL_M7'BASE'LARGE THEN
          FAILED ("ST_DECIMAL_M7'SAFE_LARGE /= " &
                  "ST_DECIMAL_M7'BASE'LARGE");
     END IF;
     IF ST_DECIMAL_M7'SAFE_SMALL /= ST_DECIMAL_M7'BASE'SAFE_SMALL THEN
          FAILED ("ST_DECIMAL_M7'SAFE_SMALL /= " &
                  "ST_DECIMAL_M7'BASE'SAFE_SMALL");
     END IF;
     IF ST_DECIMAL_M7'SAFE_LARGE /= ST_DECIMAL_M7'BASE'SAFE_LARGE THEN
          FAILED ("ST_DECIMAL_M7'SAFE_LARGE /= " &
                  "ST_DECIMAL_M7'BASE'SAFE_LARGE");
     END IF;
     IF ST_DECIMAL_M7'SMALL < ST_DECIMAL_M7'BASE'SAFE_SMALL THEN
          FAILED("ST_DECIMAL_M7'SMALL < ST_DECIMAL_M7'BASE'SAFE_SMALL");
     END IF;
     IF ST_DECIMAL_M7'LARGE > ST_DECIMAL_M7'BASE'SAFE_LARGE THEN
          FAILED("ST_DECIMAL_M7'LARGE > ST_DECIMAL_M7'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_DECIMAL_M7'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_DECIMAL_M7'SAFE_SMALL;
     BEGIN
          IF ST_DECIMAL_M7'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_DECIMAL_M7'SAFE_LARGE /= " &
                       "(2.0 ** ST_DECIMAL_M7'BASE'MANTISSA - 1.0) * " &
                       "ST_DECIMAL_M7'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     IF ST_DECIMAL_M3'SAFE_SMALL /= ST_DECIMAL_M3'BASE'SMALL THEN
          FAILED ("ST_DECIMAL_M3'SAFE_SMALL /= " &
                  "ST_DECIMAL_M3'BASE'SMALL");
     END IF;
     IF ST_DECIMAL_M3'SAFE_LARGE /= ST_DECIMAL_M3'BASE'LARGE THEN
          FAILED ("ST_DECIMAL_M3'SAFE_LARGE /= " &
                  "ST_DECIMAL_M3'BASE'LARGE");
     END IF;
     IF ST_DECIMAL_M3'SAFE_SMALL /= ST_DECIMAL_M3'BASE'SAFE_SMALL THEN
          FAILED ("ST_DECIMAL_M3'SAFE_SMALL /= " &
                  "ST_DECIMAL_M3'BASE'SAFE_SMALL");
     END IF;
     IF ST_DECIMAL_M3'SAFE_LARGE /= ST_DECIMAL_M3'BASE'SAFE_LARGE THEN
          FAILED ("ST_DECIMAL_M3'SAFE_LARGE /= " &
                  "ST_DECIMAL_M3'BASE'SAFE_LARGE");
     END IF;
     IF ST_DECIMAL_M3'SMALL < ST_DECIMAL_M3'BASE'SAFE_SMALL THEN
          FAILED("ST_DECIMAL_M3'SMALL < ST_DECIMAL_M3'BASE'SAFE_SMALL");
     END IF;
     IF ST_DECIMAL_M3'LARGE > ST_DECIMAL_M3'BASE'SAFE_LARGE THEN
          FAILED("ST_DECIMAL_M3'LARGE > ST_DECIMAL_M3'BASE'SAFE_LARGE");
     END IF;
     DECLARE
          BASE_MANT  : CONSTANT := ST_DECIMAL_M3'BASE'MANTISSA;
          SAFE_LARGE : CONSTANT := ( (2.0 ** (BASE_MANT - 1) - 1.0) +
                                      2.0 ** (BASE_MANT - 1) ) *
                                   ST_DECIMAL_M3'SAFE_SMALL;
     BEGIN
          IF ST_DECIMAL_M3'SAFE_LARGE /= SAFE_LARGE THEN
               FAILED ("ST_DECIMAL_M3'SAFE_LARGE /= " &
                       "(2.0 ** ST_DECIMAL_M3'BASE'MANTISSA - 1.0) * " &
                       "ST_DECIMAL_M3'SAFE_SMALL");
          END IF;
     END;

     -------------------------------------------------------------------

     RESULT;

END C35A06A;
