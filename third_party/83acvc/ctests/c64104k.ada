-- C64104K.ADA

-- OBJECTIVE:
--     CHECK THAT CONSTRAINT_ERROR IS RAISED UNDER THE APPROPRIATE
--     CIRCUMSTANCES FOR ACCESS PARAMETERS, NAMELY WHEN THE
--     ACTUAL INDEX BOUNDS OR DISCRIMINANTS ARE NOT EQUAL
--     TO THE FORMAL CONSTRAINTS BEFORE THE CALL (FOR IN AND IN OUT
--     MODES), AND WHEN THE FORMAL CONSTRAINTS ARE NOT EQUAL TO THE
--     ACTUAL CONSTRAINTS UPON RETURN (FOR IN OUT AND OUT MODES).

--         (H) AFTER RETURN, OUT MODE, UNCONSTRAINED FORMAL, DYNAMIC
--             RECORD DISCRIMINANT.

-- HISTORY:
--     JRK 03/18/81  CREATED ORIGINAL TEST.
--     NL  10/13/81
--     SPS 10/26/82
--     BCB 11/12/87  CHANGED HEADING TO STANDARD FORMAT.  ADDED CODE TO
--                   ENSURE THAT SUBPROGRAMS ARE ACTUALLY CALLED.

WITH REPORT;
PROCEDURE C64104K IS

     USE REPORT;

BEGIN
     TEST ("C64104K", "CHECK THAT CONSTRAINT_ERROR IS RAISED " &
           "APPROPRIATELY FOR ACCESS PARAMETERS");

     --------------------------------------------------

     DECLARE
          TYPE ARR IS ARRAY (BOOLEAN RANGE <>) OF INTEGER;
          TYPE T (B : BOOLEAN := FALSE) IS
               RECORD
                    I : INTEGER;
                    A : ARR (FALSE..B);
               END RECORD;

          TYPE A IS ACCESS T;

          CALLED : BOOLEAN := FALSE;

          V : A (IDENT_BOOL(FALSE)) := NEW T (IDENT_BOOL(FALSE));

          PROCEDURE P (X : OUT A) IS
          BEGIN
               CALLED := TRUE;
               X := NEW T (TRUE);
          EXCEPTION
               WHEN OTHERS =>
                    FAILED ("EXCEPTION RAISED IN PROCEDURE");
          END P;

     BEGIN

          P (V);
          FAILED ("EXCEPTION NOT RAISED AFTER RETURN");

     EXCEPTION
          WHEN CONSTRAINT_ERROR =>
               IF NOT CALLED THEN
                    FAILED ("SUBPROGRAM P WAS NOT CALLED");
               END IF;
          WHEN OTHERS =>
               FAILED ("WRONG EXCEPTION RAISED");
     END;

     --------------------------------------------------

     RESULT;

END C64104K;
