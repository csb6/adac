-- C45624A.ADA

-- OBJECTIVE:
--     FOR FLOATING POINT TYPES, CHECK WHETHER NUMERIC_ERROR (OR
--     CONSTRAINT_ERROR) IS RAISED IF THE RESULT OF A FLOATING POINT
--     EXPONENTIATION IS OUTSIDE THE RANGE OF THE BASE TYPE AND
--     MACHINE_OVERFLOWS IS FALSE.  THIS TESTS DIGITS 5.

-- HISTORY:
--     BCB 02/09/88  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;

PROCEDURE C45624A IS

     TYPE FLT IS DIGITS 5;

     F : FLT;

     FUNCTION EQUAL_FLT (ONE, TWO : FLT) RETURN BOOLEAN IS
     BEGIN
          IF EQUAL(3,3) THEN
               RETURN ONE = TWO;
          ELSE
               RETURN ONE /= TWO;
          END IF;
     END EQUAL_FLT;

BEGIN
     TEST ("C45624A", "FOR FLOATING POINT TYPES, CHECK WHETHER " &
                      "NUMERIC_ERROR (OR CONSTRAINT_ERROR) IS RAISED " &
                      "IF MACHINE_OVERFLOWS IS FALSE.  THIS TESTS " &
                      "DIGITS 5");

     IF FLT'MACHINE_OVERFLOWS THEN
          NOT_APPLICABLE ("THIS TEST IS NOT APPLICABLE DUE TO " &
                          "MACHINE_OVERFLOWS BEING TRUE");
     ELSE
          BEGIN
               F := FLT'BASE'FIRST**IDENT_INT (2);
               COMMENT ("NEITHER NUMERIC_ERROR OR CONSTRAINT_ERROR " &
                        "WAS RAISED WHEN MACHINE_OVERFLOWS WAS FALSE");
               IF EQUAL_FLT(F,F**IDENT_INT(1)) THEN
                    COMMENT ("DON'T OPTIMIZE F");
               END IF;
          EXCEPTION
               WHEN NUMERIC_ERROR =>
                    COMMENT ("NUMERIC_ERROR WAS RAISED WHEN MACHINE_" &
                             "OVERFLOWS WAS FALSE");
               WHEN CONSTRAINT_ERROR =>
                    COMMENT ("CONSTRAINT_ERROR WAS RAISED WHEN " &
                             "MACHINE_OVERFLOWS WAS FALSE");
               WHEN OTHERS =>
                    FAILED ("AN EXCEPTION OTHER THAN NUMERIC_ERROR " &
                            "OR CONSTRAINT_ERROR WAS RAISED");
          END;
     END IF;

     RESULT;
END C45624A;
