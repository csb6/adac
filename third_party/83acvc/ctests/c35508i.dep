-- C35508I.DEP

-- OBJECTIVE:
--     CHECK THAT 'PRED' AND 'SUCC' YIELD THE CORRECT RESULTS WHEN THE
--     PREFIX IS A BOOLEAN TYPE WITH AN ENUMERATION REPRESENTATION
--     CLAUSE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE TO IMPLEMENTATIONS WHICH SUPPORT
--     ENUMERATION REPRESENTATION CLAUSES.
--
--     IF ENUMERATION REPRESENTATION CLAUSES ARE NOT SUPPORTED, THEN
--     THE REPRESENTATION CLAUSE FOR NEWBOOL MUST BE REJECTED.

-- HISTORY:
--     RJW 03/19/86  CREATED ORIGINAL TEST.
--     BCB 01/04/88  MODIFIED HEADER.

WITH REPORT; USE REPORT;

PROCEDURE C35508I IS

     TYPE NEWBOOL  IS  NEW BOOLEAN;
     FOR NEWBOOL USE ( FALSE => 24, TRUE => 32 );      -- N/A => ERROR.
     F : NEWBOOL := TRUE;
     T : NEWBOOL := FALSE;

BEGIN
     TEST ("C35508I", "CHECK THAT 'PRED' AND 'SUCC' YIELD THE " &
                      "CORRECT RESULTS WHEN THE PREFIX IS A " &
                      "BOOLEAN TYPE WITH AN ENUMERATION " &
                      "REPRESENTATION CLAUSE" );

     IF EQUAL (3,3) THEN
          F := FALSE;
          T := TRUE;
     END IF;

     BEGIN
          IF NEWBOOL'PRED (T) /= FALSE THEN
               FAILED ( "INCORRECT VALUE FOR PRED OF TRUE" );
          END IF;
          IF NEWBOOL'SUCC (F) /= TRUE THEN
               FAILED ( "INCORRECT VALUE FOR SUCC OF FALSE" );
          END IF;
     END;

     DECLARE

          SUBTYPE SBOOL IS NEWBOOL RANGE T .. T;

     BEGIN
          BEGIN
               IF SBOOL'PRED (T) /= FALSE THEN
                    FAILED ( "INCORRECT VALUE FOR SBOOL'PRED " &
                             "OF TRUE" );
               END IF;
          END;

          BEGIN
               IF SBOOL'PRED (F) = TRUE THEN
                    FAILED("'PRED(FALSE) WRAPPED AROUND TO TRUE");
               END IF;
               FAILED ( "NO EXCEPTION RAISED FOR " &
                        "'PRED (FALSE)" );
          EXCEPTION
               WHEN CONSTRAINT_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ( "WRONG EXCEPTION RAISED FOR " &
                             "'PRED (FALSE)" );
          END;

          BEGIN
               IF SBOOL'SUCC (T) = FALSE THEN
                    FAILED("'SUCC(TRUE) WRAPPED AROUND TO FALSE");
               END IF;
               FAILED ( "NO EXCEPTION RAISED FOR " &
                        "'SUCC (TRUE)" );
          EXCEPTION
               WHEN CONSTRAINT_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ( "WRONG EXCEPTION RAISED FOR " &
                             "'SUCC (TRUE)" );
          END;
     END;

     RESULT;
END C35508I;
