-- C53006A.ADA

-- CHECK THAT CONTROL FLOWS TO THE CORRECT ALTERNATIVE SEQUENCE
--    OF STATEMENTS IN COMPLEX NON-NESTED IF_STATEMENTS WITH STATIC
--    CONDITIONS.

-- DCB 03/12/80
-- DCB 04/10/80
-- JRK 7/8/80
-- SPS 3/4/83

WITH REPORT;
PROCEDURE C53006A IS

     USE REPORT;

     I1 : CONSTANT INTEGER := 1;
     I9 : CONSTANT INTEGER := 9;
     BT : CONSTANT BOOLEAN := TRUE;
     BF : CONSTANT BOOLEAN := FALSE;
     FLOW_COUNT : INTEGER;

BEGIN
     TEST("C53006A","CHECK THAT CONTROL FLOWS TO THE CORRECT" &
          " ALTERNATIVE SEQUENCE OF STMTS IN COMPLEX NON-NESTED" &
          " IF_STATEMENTS WITH STATIC CONDITIONS");

     FLOW_COUNT := 0;

     -- CHECK IF_STATEMENTS THAT HAVE AN ELSE PART AND NO ELSIF PARTS.

     IF TRUE THEN
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSE FAILED("INCORRECT SEQUENCE TAKEN1");
     END IF;

     IF FALSE THEN
          FAILED("INCORRECT SEQUENCE TAKEN2");
     ELSE FLOW_COUNT := FLOW_COUNT + 1;
     END IF;

     -- CHECK IF_STATEMENTS THAT HAVE TWO ELSIF PARTS AND NO ELSE PART.

     IF BT THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF TRUE THEN
          FAILED("INCORRECT SEQUENCE TAKEN3");
     ELSIF FALSE THEN
          FAILED("INCORRECT SEQUENCE TAKEN4");
     END IF;

     IF BF THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN5");
     ELSIF I1 = 1 THEN  --(TRUE)
          NULL;
     ELSIF TRUE THEN
          FAILED("INCORRECT SEQUENCE TAKEN6");
     END IF;
     FLOW_COUNT := FLOW_COUNT + 1;

     IF I9 < 5 THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN7");
     ELSIF I1 /= 1 THEN  --(FALSE)
          NULL;     -- FAILED("INCORRECT SEQUENCE TAKEN8");
     ELSIF I1 + I9 /= 0 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     END IF;

     IF NOT BT THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN8B");
     ELSIF BF OR I9 < 5 THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN8C");
     ELSIF I9 > 5 AND I1 > 5 THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN8D");
     END IF;

     -- CHECK IF_STATEMENTS THAT HAVE TWO ELSIF PARTS AND AN ELSE PART.

     IF I9 > 5 AND I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF FALSE THEN
          FAILED("INCORRECT SEQUENCE TAKEN9");
     ELSIF TRUE THEN
          FAILED("INCORRECT SEQUENCE TAKEN10");
     ELSE FAILED("INCORRECT SEQUENCE TAKEN11");
     END IF;

     IF I1 < 5 AND THEN I9 < 5 THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN12");
     ELSIF I9 < 5 OR ELSE I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSIF TRUE THEN
          FAILED("INCORRECT SEQUENCE TAKEN13");
     ELSE FAILED("INCORRECT SEQUENCE TAKEN14");
     END IF;

     IF NOT BT OR (BT AND I9 < 5) THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN15");
     ELSIF (BT AND I9 < 5) OR (BF AND I1 < 5) THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN16");
     ELSIF (BT OR (BF AND I9 > 5)) AND THEN I1 < 5 THEN  --(TRUE)
          FLOW_COUNT := FLOW_COUNT + 1;
     ELSE FAILED("INCORRECT SEQUENCE TAKEN17");
     END IF;

     IF (I9 < 5 OR BF) OR ELSE NOT BT THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN18");
     ELSIF (BF OR I9 < 5) OR ELSE (I1 + I9 /= 1 AND I9 > 20) THEN
          FAILED("INCORRECT SEQUENCE TAKEN19");
     ELSIF BT AND (BF OR I9 < 5) THEN  --(FALSE)
          FAILED("INCORRECT SEQUENCE TAKEN20");
     ELSE FLOW_COUNT := FLOW_COUNT + 1;
     END IF;

     -- CHECK OVERALL CONTROL FLOW.

     IF FLOW_COUNT /= 9 THEN
          FAILED("INCORRECT FLOW_COUNT VALUE");
     END IF;

     RESULT;
END C53006A;
