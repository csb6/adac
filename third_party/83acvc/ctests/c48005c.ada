-- C48005C.ADA

-- CHECK THAT AN ALLOCATOR OF THE FORM "NEW T X" ALLOCATES A NEW OBJECT
-- EACH TIME IT IS EXECUTED AND THAT IF T IS AN ACCESS TYPE, T'S
-- DESIGNATED TYPE IS UNCONSTRAINED, AND X IS AN APPROPRIATE INDEX OR
-- DISCRIMINANT CONSTRAINT, CHECK THAT THE VALUE NULL IS ALLOCATED, AND
-- NO CONSTRAINT_ERROR IS RAISED EVEN IF THE CONSTRAINT DOES NOT SATISFY
-- A CONSTRAINT SPECIFIED FOR THE ALLOCATOR'S BASE TYPE
-- (E.G., XM = NEW ACC_PERSON(F)).

-- EG  08/27/84
-- EG  05/08/85

WITH REPORT;

PROCEDURE C48005C IS

     USE REPORT;

BEGIN

     TEST("C48005C","CHECK THAT THE FORM 'NEW T X' ALLOCATES " &
                    "A NEW OBJECT AND THAT IF T IS "  &
                    "AN ACCESS TYPE, T'S DESIGNATED TYPE IS " &
                    "UNCONSTRAINED, AND X IS AN APPROPRIATE " &
                    "INDEX OR DISCRIMINANT CONSTRAINT, CHECK " &
                    "THAT THE VALUE NULL IS ALLOCATED");

     DECLARE

          TYPE UA IS ARRAY(INTEGER RANGE <>) OF INTEGER;
          TYPE A_UA IS ACCESS UA;
          TYPE AA_UA IS ACCESS A_UA;
          V_AA_UA : AA_UA;

     BEGIN

          V_AA_UA := NEW A_UA(1 .. 10);
          IF V_AA_UA.ALL /= NULL THEN
               FAILED("VARIABLE NOT SET TO NULL - CASE 1");
          END IF;

     EXCEPTION

          WHEN OTHERS => FAILED("EXCEPTION RAISED - CASE 1");

     END;

     DECLARE

          TYPE GENDER IS (M, F, UNKNOWN);
          SUBTYPE GENDER_TYPE IS GENDER RANGE M .. F;
          TYPE PERSON (G : GENDER_TYPE := F) IS
               RECORD
                    A : INTEGER;
               END RECORD;
          TYPE A_PERSON IS ACCESS PERSON;
          TYPE AA_PERSON IS ACCESS A_PERSON(M);
          V_AA_PERSON : AA_PERSON;

     BEGIN

          V_AA_PERSON := NEW A_PERSON(F);
          IF V_AA_PERSON.ALL /= NULL THEN
               FAILED ("VARIABLE NOT SET TO NULL - CASE 2");
          END IF;

     EXCEPTION

          WHEN OTHERS => FAILED ("EXCEPTION RAISED - CASE 2");

     END;

     RESULT;

END C48005C;
