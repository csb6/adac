-- C52007A.ADA

-- CHECK THAT NUMERIC_ERROR, CONSTRAINT_ERROR, OR ANY OTHER 
--    EXCEPTIONS ARE NOT RAISED FOR INTEGER ASSIGNMENTS WHERE THE 
--    EXPRESSION VALUE IS ACTUALLY IN THE TARGET VARIABLE'S RANGE 
--    AND WHERE THE TARGET VARIABLE RANGE BOUNDS OR THE EXPRESSION 
--    VALUE ARE NEAR INTEGER'FIRST  OR  INTEGER'LAST .


-- RM 02/17/80
-- SPS 11/1/82
-- BHS 7/13/84

WITH SYSTEM;
WITH REPORT;
PROCEDURE  C52007A  IS

     USE  REPORT; 

     W_VAR       :  INTEGER           := IDENT_INT(INTEGER'LAST); 
     W_CON       :  CONSTANT INTEGER  := IDENT_INT(INTEGER'LAST); 
     W_LIT       :  CONSTANT          := INTEGER'POS(INTEGER'LAST); 
     --             TRUE LITERAL      (= INTEGER'LAST )

     TWELVE_VAR  :  INTEGER           := IDENT_INT(12); 
     TWELVE_CON  :  CONSTANT INTEGER  := 12; 
     TWELVE_LIT  :  CONSTANT          := 12; 
     --             TRUE LITERAL      (= 12 )

BEGIN


     TEST( "C52007A" , "CHECK THAT INTEGER ASSIGNMENTS DO NOT " &
                       "UNNECESSARILY CAUSE EXCEPTIONS TO BE RAISED" );


     DECLARE
          I   :  INTEGER; 
     BEGIN
          I  :=  W_VAR; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 01" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 01" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 01" );
     END; 


     DECLARE
          I   :  INTEGER; 
     BEGIN
          I  :=  TWELVE_CON; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 02" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 02" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 02" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST..INTEGER'LAST; 
     BEGIN
          I  :=  W_LIT;           --  ( W_LIT = INTEGER'LAST )

     EXCEPTION

          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 03" );

          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 03" );

          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 03" );

     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST..INTEGER'LAST; 
     BEGIN
          I  :=  12; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 04" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 04" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 04" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST+1..INTEGER'LAST-1; 
     BEGIN
          I  :=  W_CON - 1; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 05" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 05" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 05" );
     END; 


     DECLARE
          I   :  INTEGER RANGE -20..INTEGER'LAST; 
     BEGIN
          I  :=  W_VAR; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 06" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 06" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 06" );
     END; 


     DECLARE
          I   :  INTEGER RANGE -20..INTEGER'LAST; 
     BEGIN
          I  :=  -12; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 07" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 07" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 07" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST..20; 
     BEGIN
          I  :=  - W_LIT; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 08" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 08" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 08" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST..20; 
     BEGIN
          I  :=  - W_VAR; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 09" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 09" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 09" );
     END; 


     DECLARE
          I   :  INTEGER RANGE -20..INTEGER'LAST; 
     BEGIN
          I  :=  - TWELVE_LIT; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 10" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 10" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 10" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'LAST..INTEGER'LAST; 
     BEGIN
          I  :=  W_CON; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 11" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 11" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 11" );
     END; 


     DECLARE
          I   :  INTEGER RANGE INTEGER'FIRST..INTEGER'FIRST; 
     BEGIN
          I  :=  INTEGER'FIRST; 
     EXCEPTION
          WHEN  NUMERIC_ERROR     =>  FAILED( "NUMERIC_ERROR 12" );
          WHEN  CONSTRAINT_ERROR  =>  FAILED( "CONSTRAINT_ERROR 12" );
          WHEN  OTHERS            =>  FAILED( "EXCEPTION RAISED 12" );
     END; 


     RESULT; 


END C52007A; 
