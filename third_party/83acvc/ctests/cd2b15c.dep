-- CD2B15C.DEP

-- OBJECTIVE:
--     IF A SPECIFIED COLLECTION SIZE IS LARGE ENOUGH TO HOLD
--     SOME VALUES OF THE DESIGNATED TYPE, THEN "STORAGE_ERROR"
--     IS RAISED AT EVALUATION OF AN ALLOCATOR WHEN INSUFFICIENT
--     STORAGE IS AVAILABLE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS THAT SUPPORT
--     COLLECTION SIZE SPECIFICATIONS FOR ACCESS TYPES, AND THEN
--     ONLY IF THE COLLECTION SIZE SPECIFIED IS THE SIZE THAT IS
--     REPORTED BY THE 'STORAGE_SIZE ATTRIBUTE.

--     IF SUCH REPRESENTAION CLAUSES FOR ACCESS TYPES ARE NOT
--     SUPPORTED, THEN THE REPRESENTATION CLAUSE FOR
--     "LINK1'STORAGE_SIZE" MUST BE REJECTED.

-- HISTORY:
--     DHH 09/23/87 CREATED ORIGINAL TEST.
--     PMW 09/19/88 MODIFIED WITHDRAWN TEST.

PROCEDURE CD2B15C_TEST IS
     TYPE LINK1 IS ACCESS INTEGER;
     FOR LINK1'STORAGE_SIZE
          USE 256;                    -- N/A => ERROR
BEGIN
     NULL;
END CD2B15C_TEST;

WITH SYSTEM;
WITH REPORT; USE REPORT;
PROCEDURE CD2B15C IS

     INAPPLICABLE : EXCEPTION;
     HAS_FAILED : EXCEPTION;
     UNITS_FOR_ONE : INTEGER := IDENT_INT(1);
     UNITS_FOR_TWO, UNITS_FOR_OTHERS : INTEGER;
     UNITS_PER_INTEGER : CONSTANT :=
         (INTEGER'SIZE + SYSTEM.STORAGE_UNIT - 1) / SYSTEM.STORAGE_UNIT;

BEGIN
     TEST ("CD2B15C", "IF A SPECIFIED COLLECTION SIZE IS LARGE " &
                      "ENOUGH TO HOLD SOME VALUES OF " &
                      "THE DESIGNATED TYPE, THEN " &
                      "STORAGE_ERROR IS RAISED BY THE " &
                      "EVALUATION OF AN ALLOCATOR WHEN " &
                      "INSUFFICIENT STORAGE IS AVAILABLE");

     LOOP
          BEGIN
               DECLARE
                    TYPE LINK IS ACCESS INTEGER;
                    FOR LINK'STORAGE_SIZE USE UNITS_FOR_ONE;
                    ACC : ARRAY (1..1) OF LINK;
               BEGIN
                    ACC(1) := NEW INTEGER'(IDENT_INT(1));
                    IF EQUAL (ACC(1).ALL,500) THEN
                         COMMENT ("IRRELEVANT");
                    END IF;
                    IF LINK'STORAGE_SIZE > UNITS_FOR_ONE THEN
                         RAISE INAPPLICABLE;
                    END IF;
                    EXIT;
               EXCEPTION
                    WHEN STORAGE_ERROR =>
                         UNITS_FOR_ONE := UNITS_FOR_ONE + 1;
                    WHEN OTHERS =>
                         FAILED ("INAPPROPRIATE ERROR RAISED ON " &
                                 "ALLOCATION - 1");
                         RAISE HAS_FAILED;
               END;
          EXCEPTION
               WHEN STORAGE_ERROR =>
                    UNITS_FOR_ONE := UNITS_FOR_ONE + 1;
               WHEN OTHERS =>
                    FAILED ("INAPPROPRIATE ERROR RAISED ON " &
                            "ALLOCATION - 2");
                    RAISE HAS_FAILED;
          END;
     END LOOP;

     UNITS_FOR_TWO := UNITS_FOR_ONE;

     LOOP
          BEGIN
               DECLARE
                    TYPE LINK IS ACCESS INTEGER;
                    FOR LINK'STORAGE_SIZE USE UNITS_FOR_TWO;
                    ACC : ARRAY (1..2) OF LINK;
               BEGIN
                    ACC(1) := NEW INTEGER'(IDENT_INT(1));
                    ACC(2) := NEW INTEGER'(IDENT_INT(2));
                    IF EQUAL (ACC(1).ALL,ACC(2).ALL) THEN
                         COMMENT ("IRRELEVANT");
                    END IF;
                    IF LINK'STORAGE_SIZE > UNITS_FOR_TWO THEN
                         RAISE INAPPLICABLE;
                    END IF;
                    EXIT;
               EXCEPTION
                    WHEN STORAGE_ERROR =>
                         UNITS_FOR_TWO := UNITS_FOR_TWO + 1;
                    WHEN OTHERS =>
                         FAILED ("INAPPROPRIATE ERROR RAISED ON " &
                                 "ALLOCATION - 3");
                         RAISE HAS_FAILED;
               END;
          EXCEPTION
               WHEN STORAGE_ERROR =>
                    UNITS_FOR_TWO := UNITS_FOR_TWO + 1;
               WHEN OTHERS =>
                    FAILED ("INAPPROPRIATE ERROR RAISED ON " &
                            "ALLOCATION - 4");
                    RAISE HAS_FAILED;
          END;
     END LOOP;

     UNITS_FOR_OTHERS := UNITS_FOR_TWO - UNITS_FOR_ONE;

     BEGIN   --OUTER EXCEPTION HANDLER.
          DECLARE

               COLLECTION_SIZE : CONSTANT INTEGER :=
                               UNITS_FOR_ONE + 9 * UNITS_FOR_OTHERS;

               TYPE LINK IS ACCESS INTEGER;
               FOR LINK'STORAGE_SIZE USE
                                  COLLECTION_SIZE;

               UPPERBOUND : INTEGER := 10;
               ACC_ARRAY : ARRAY(1..UPPERBOUND) OF LINK;
               L : LINK := NULL;
               J, K : INTEGER := 0;
          BEGIN    -- ACTIVE DECLARE

               IF LINK'STORAGE_SIZE > COLLECTION_SIZE THEN
                    RAISE INAPPLICABLE;
               ELSIF LINK'STORAGE_SIZE < COLLECTION_SIZE THEN
                    FAILED ("COLLECTION SIZE ALLOCATED WAS " &
                                   "LESS THAN REQUESTED");
                    RAISE HAS_FAILED;
               END IF;

               BEGIN
                    FOR J IN 1..UPPERBOUND LOOP
                         K := IDENT_INT(J);
                         ACC_ARRAY(J) :=
                                      NEW INTEGER'(IDENT_INT(J));
                         IF ACC_ARRAY(J).ALL /= J THEN
                              FAILED("INCORRECT VALUE FOR ARRAY " &
                                     "POSITION " & INTEGER'IMAGE (J));
                         END IF;
                    END LOOP;
                EXCEPTION
                    WHEN STORAGE_ERROR =>
                         COMMENT("STORAGE_ERROR RAISED PREMATURELY " &
                                "AT EVALUATION OF AN ALLOCATOR");
                    WHEN OTHERS =>
                         FAILED("EXCEPTION RAISED AT ARRAY " &
                                "POSITION " & INTEGER'IMAGE(K));
               END;  --INNER EXCEPTION HANDLER.
               BEGIN
                    L := NEW INTEGER'(UPPERBOUND + 1);
                    FAILED("EXCEPTION NOT RAISED WHEN " &
                           "INSUFFICIENT STORAGE AVAILABLE");
                    IF EQUAL(L.ALL, L.ALL) THEN
                         COMMENT("IRRELEVANT");
                    END IF;
               EXCEPTION
                    WHEN STORAGE_ERROR =>
                         COMMENT("STORAGE_ERROR RAISED AT " &
                                 "INSUFFICENT STORAGE");
                    WHEN OTHERS =>
                         FAILED("WRONG EXCEPTION RAISED " &
                                "INSTEAD OF STORAGE_ERROR");
               END;
          END;    --ACTIVE DECLARE

     EXCEPTION
          WHEN STORAGE_ERROR =>
               FAILED("STORAGE_ERROR RAISED AT REPRESENTATION " &
                       "CLAUSE");
          WHEN INAPPLICABLE =>
               NOT_APPLICABLE("MORE STORAGE ALLOCATED THAN WAS " &
                              "REQUESTED");
          WHEN HAS_FAILED =>
               NULL;
          WHEN OTHERS =>
               FAILED("OTHER EXCEPTION AT REPRESENTATION CLAUSE");

     END;  -- OUTER EXCEPTION HANDLER.
     RESULT;
END CD2B15C;
