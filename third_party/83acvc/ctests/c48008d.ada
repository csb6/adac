-- C48008D.ADA

-- FOR ALLOCATORS OF THE FORM "NEW T X", CHECK THAT CONSTRAINT_ERROR IS
-- RAISED IF T IS AN UNCONSTRAINED ACCESS TYPE WHOSE DESIGNATED TYPE IS
-- AN UNCONSTRAINED ARRAY TYPE, X IS AN INDEX CONSTRAINT, AND ONE OF THE
-- NON-NULL INDEX BOUNDS OF X IS OUTSIDE THE RANGE OF THE CORRESPONDING
-- INDEX SUBTYPE FOR THE DESIGNATED TYPE.

-- EG  08/30/84

WITH REPORT;

PROCEDURE C48008D IS

     USE REPORT;

BEGIN

     TEST("C48008D","FOR ALLOCATORS OF THE FORM 'NEW T X', " &
                    "CHECK THAT CONSTRAINT_ERROR IS RAISED " &
                    "WHEN APPROPRIATE - UNCONSTRAINED ACCESS " &
                    "TYPE OF UNCONSTRAINED ARRAY TYPE");

     DECLARE

          TYPE INT IS RANGE 1 .. 5;

          TYPE UA1 IS ARRAY(INT RANGE <>) OF INTEGER;
          TYPE UA2 IS ARRAY(INT RANGE <>, INT RANGE <>) OF INTEGER;

          TYPE A_UA1 IS ACCESS UA1;
          TYPE A_UA2 IS ACCESS UA2;

          TYPE AA_UA1 IS ACCESS A_UA1;
          TYPE AA_UA2 IS ACCESS A_UA2;

          V_AA_UA1 : AA_UA1;
          V_AA_UA2 : AA_UA2;

     BEGIN

          BEGIN
               V_AA_UA1 := NEW A_UA1(1 .. INT(IDENT_INT(6)));
               FAILED ("NO EXCEPTION RAISED - UA1");
          EXCEPTION
               WHEN CONSTRAINT_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ("WRONG EXCEPTION RAISED - UA1");
          END;

          BEGIN
               V_AA_UA2 := NEW A_UA2(2 .. 4, 0 .. 4);
               FAILED ("NO EXCEPTION RAISED - UA2");
          EXCEPTION
               WHEN CONSTRAINT_ERROR =>
                    NULL;
               WHEN OTHERS =>
                    FAILED ("WRONG EXCEPTION RAISED - UA2");
          END;

     END;

     RESULT;

END C48008D;
