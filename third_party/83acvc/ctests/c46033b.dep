-- C46033B.DEP

-- OBJECTIVE:
--     CHECK CONVERSIONS TO FIXED POINT TYPES WHEN THE OPERAND TYPE
--     IS ANOTHER FIXED POINT TYPE, FOR FIXED POINT TYPES WITH VALUES
--     OF 'SMALL NOT EQUAL TO POWERS OF TWO.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO IMPLEMENTATIONS THAT SUPPORT
--     A VALUE OF 'SMALL NOT EQUAL TO A POWER OF TWO FOR FIXED POINT
--     TYPES.

--     IF SUCH A VALUE OF 'SMALL IS NOT SUPPORTED, THEN THE
--     REPRESENTATION CLAUSE FOR "FIX1" MUST BE REJECTED.

-- HISTORY:
--     JET 07/12/88  CREATED ORIGINAL TEST.

WITH REPORT; USE REPORT;
PROCEDURE C46033B IS

     TYPE FIX1 IS DELTA 2#0.1# RANGE -16#20.0# .. 16#20.0#;
     FOR FIX1'SMALL USE 2#0.011#;               -- N/A => ERROR.
     TYPE FIX2 IS DELTA 2#0.001# RANGE -16#80.0# .. 16#80.0#;
     FOR FIX2'SMALL USE 2#0.00011#;
     TYPE FIX3 IS DELTA 2#0.00001# RANGE -16#200.0# .. 16#200.0#;
     FOR FIX3'SMALL USE 2#0.0000011#;

     F1 : FIX1;
     F2 : FIX2;
     F3 : FIX3;

     GENERIC
          TYPE F IS DELTA <>;
     FUNCTION IDENT_G (X : F) RETURN F;

     FUNCTION IDENT_G (X : F) RETURN F IS
     BEGIN
          RETURN X + F(IDENT_INT(0));
     END IDENT_G;

     FUNCTION IDENT IS NEW IDENT_G(FIX1);
     FUNCTION IDENT IS NEW IDENT_G(FIX2);
     FUNCTION IDENT IS NEW IDENT_G(FIX3);

BEGIN
     TEST ("C46033B", "CHECK CONVERSIONS TO FIXED POINT TYPES WHEN " &
                      "THE OPERAND TYPE IS ANOTHER FIXED POINT TYPE");

     F1 := IDENT(-16#1E.6#);
     IF FIX1(F1) /= -16#1E.6# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (1)");
     END IF;

     F1 := IDENT(16#0.C#);
     IF FIX2(F1) /= 16#0.C0# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (2)");
     END IF;

     F1 := IDENT(-16#10.E#);
     IF FIX3(F1) /= -16#10.E0# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (3)");
     END IF;

     F2 := IDENT(16#3.18#);
     IF FIX1(F2) < 16#3.0# OR
        FIX1(F2) > 16#3.6# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (4)");
     END IF;

     F2 := IDENT(-16#40.F8#);
     IF FIX2(F2) /= -16#40.F8# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (5)");
     END IF;

     F2 := IDENT(16#0.0#);
     IF FIX3(F2) /= 16#0.0# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (6)");
     END IF;

     F3 := IDENT(-16#0.06#);
     IF FIX1(F3) < -16#0.6# OR
        FIX1(F3) > -16#0.0# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (7)");
     END IF;

     F3 := -IDENT(16#55.68#);
     IF FIX2(F3) /= -16#55.68# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (8)");
     END IF;

     F3 := IDENT(16#1FF.FE#);
     IF FIX3(F3) /= 16#1FF.FE# THEN
          FAILED ("INCORRECT RESULT FROM CONVERSION (9)");
     END IF;

     RESULT;

END C46033B;
