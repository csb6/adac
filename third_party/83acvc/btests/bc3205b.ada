-- BC3205B.ADA

-- CHECK THAT AN INSTANTIATION IS ILLEGAL IF A FORMAL LIMITED/NON-
-- LIMITED PRIVATE TYPE IS USED IN AN ALLOCATOR, A VARIABLE OBJECT
-- DECLARATION, A RECORD COMPONENT DECLARATION, OR AN ARRAY TYPE
-- DEFINITION WHEN THE ACTUAL PARAMETER IS AN UNCONSTRAINED ARRAY TYPE
-- OR AN UNCONSTRAINED TYPE WITH DISCRIMINANTS THAT DO NOT HAVE
-- DEFAULTS.

-- TEST WHEN THE INSTANTIATIONS APPEAR BEFORE THE GENERIC BODY.

-- SPS 7/14/82
-- JBG 4/29/85

--       **************************************************
-- AS A RESULT OF ADA COMMENTARY AI-00037, INSTANTIATIONS ARE ALWAYS
-- LEGAL IF THE FORMAL PARAMETER IS A PRIVATE TYPE WITHOUT DISCRIMINANTS
-- AND THE ACTUAL PARAMETER IS A TYPE WITH DEFAULT DISCRIMINANTS.
--       **************************************************

--       **************************************************
-- IN THIS TEST, AN ERROR MAY BE INDICATED EITHER AT THE POINT OF THE
-- INSTANTIATION (AS INDICATED IN THE TEST) OR BY REFUSING TO ACCEPT THE
-- GENERIC UNIT BODY FOR COMPILATION (WHEN THE CORRESPONDING
-- INSTANTIATION HAS AN ERROR INDICATION).
--       **************************************************

PROCEDURE BC3205B IS

     TYPE UARR IS ARRAY(INTEGER RANGE <>) OF INTEGER;
     TYPE CARR IS ARRAY(INTEGER RANGE 1..3) OF INTEGER;
     TYPE REC(D : INTEGER) IS RECORD NULL; END RECORD;
     TYPE DREC(D : INTEGER := 3) IS RECORD NULL; END RECORD;
     SUBTYPE CREC IS REC(4);
     REC1 : DREC;
     REC2 : REC (D => 3);
     AR1: CARR;
     AR2: UARR (1 .. 3);

     GENERIC
          TYPE P IS PRIVATE;
          TYPE L IS LIMITED PRIVATE;
     PACKAGE PK IS END PK;

     GENERIC
          TYPE PRV IS PRIVATE;
          TYPE LIM IS LIMITED PRIVATE;
     PACKAGE PK_ALLOC IS END PK_ALLOC;

     GENERIC
          TYPE PRV IS PRIVATE;
          TYPE LIM IS LIMITED PRIVATE;
     PACKAGE PK_OBJ IS END PK_OBJ;

     GENERIC
          TYPE PRV IS PRIVATE;
          TYPE LIM IS LIMITED PRIVATE;
     PACKAGE PK_RECCOMP IS END PK_RECCOMP;

     GENERIC
          TYPE PRV IS PRIVATE;
          TYPE LIM IS LIMITED PRIVATE;
     PACKAGE PK_ARCOMP IS END PK_ARCOMP;

     GENERIC
          TYPE P IS PRIVATE;
          POBJ : P;
     PACKAGE GP IS
          CP : CONSTANT P := POBJ;                     -- OK.
     END GP;

     PROCEDURE PROC IS
          PACKAGE N1 IS NEW PK(CREC, CREC);                -- OK.

          PACKAGE N2_ALLOC IS NEW PK_ALLOC (REC, CREC);    -- ERROR: REC
          PACKAGE N3_ALLOC IS NEW PK_ALLOC (CREC, REC);    -- ERROR: REC
          PACKAGE N4_OBJ IS NEW PK_OBJ (REC, CREC);        -- ERROR: REC
          PACKAGE N5_OBJ IS NEW PK_OBJ (CREC, REC);        -- ERROR: REC
          PACKAGE N6_RECCOMP IS NEW PK_RECCOMP (REC, CREC);-- ERROR: REC
          PACKAGE N7_RECCOMP IS NEW PK_RECCOMP (CREC, REC);-- ERROR: REC
          PACKAGE N8_ARCOMP IS NEW PK_ARCOMP (REC, CREC);  -- ERROR: REC
          PACKAGE N9_ARCOMP IS NEW PK_ARCOMP (CREC, REC);  -- ERROR: REC

          PACKAGE N12 IS NEW PK (DREC, CREC);              -- OK AI-37
          PACKAGE N13 IS NEW PK (CREC, DREC);              -- OK AI-37

          PACKAGE P1 IS NEW PK (CARR, CARR);               -- OK.

          PACKAGE P2_OBJ IS NEW PK_OBJ (UARR, CARR);      -- ERROR: UARR
          PACKAGE P3_OBJ IS NEW PK_OBJ (CARR, UARR);      -- ERROR: UARR
          PACKAGE P4_ALLOC IS NEW PK_ALLOC (UARR, CARR);  -- ERROR: UARR
          PACKAGE P5_ALLOC IS NEW PK_ALLOC (CARR, UARR);  -- ERROR: UARR
          PACKAGE P6_RECCOMP IS NEW PK_RECCOMP (UARR, CARR);
                                                          -- ERROR: UARR
          PACKAGE P7_RECCOMP IS NEW PK_RECCOMP (CARR, UARR);
                                                          -- ERROR: UARR
          PACKAGE P8_ARCOMP IS NEW PK_ARCOMP (UARR, CARR);-- ERROR: UARR
          PACKAGE P9_ARCOMP IS NEW PK_ARCOMP (CARR, UARR);-- ERROR: UARR

          PACKAGE G1 IS NEW GP(DREC, REC1);            -- OK.
          PACKAGE G2 IS NEW GP(REC, REC2);             -- OK.
          PACKAGE G3 IS NEW GP(CARR, AR1);             -- OK.
          PACKAGE G4 IS NEW GP(UARR, AR2);             -- OK.

     BEGIN
          NULL;
     END PROC;

     PACKAGE BODY PK_ALLOC IS

          TYPE AP IS ACCESS PRV;
          TYPE AL IS ACCESS LIM;
          NP : AP := NEW PRV;                -- POTENTIALLY ILLEGAL.
          NL : AL := NEW LIM;                -- POTENTIALLY ILLEGAL.

     BEGIN
          NULL;
     END PK_ALLOC;

     PACKAGE BODY PK_OBJ IS

          VP : PRV;                          -- POTENTIALLY ILLEGAL.
          VL : LIM;                          -- POTENTIALLY ILLEGAL.

     BEGIN
          NULL;
     END PK_OBJ;

     PACKAGE BODY PK_RECCOMP IS

          TYPE RC IS RECORD
               RCP : PRV;                    -- POTENTIALLY ILLEGAL.
               RCL : LIM;                    -- POTENTIALLY ILLEGAL.
          END RECORD;

     BEGIN
          NULL;
     END PK_RECCOMP;

     PACKAGE BODY PK_ARCOMP IS

          TYPE ARP IS ARRAY (INTEGER) OF PRV;-- POTENTIALLY ILLEGAL.
          TYPE ARL IS ARRAY (INTEGER) OF LIM;-- POTENTIALLY ILLEGAL.

     BEGIN
          NULL;
     END PK_ARCOMP;

     PACKAGE BODY PK IS

          TYPE AP IS ACCESS P;
          TYPE AL IS ACCESS L;
          NP : AP := NEW P;                    -- POTENTIALLY ILLEGAL.
          NL : AL := NEW L;                    -- POTENTIALLY ILLEGAL.
          VP : P;                              -- POTENTIALLY ILLEGAL.
          VL : L;                              -- POTENTIALLY ILLEGAL.

          TYPE RC IS RECORD
               RCP : P;                        -- POTENTIALLY ILLEGAL.
               RCL : L;                        -- POTENTIALLY ILLEGAL.
          END RECORD;

          TYPE ARP IS ARRAY (INTEGER) OF P;    -- POTENTIALLY ILLEGAL.
          TYPE ARL IS ARRAY (INTEGER) OF L;    -- POTENTIALLY ILLEGAL.

     BEGIN
          NULL;
     END PK;

BEGIN
     NULL;
END BC3205B;
