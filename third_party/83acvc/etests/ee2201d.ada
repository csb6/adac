-- EE2201D.ADA

-- CHECK WHETHER READ, WRITE, AND END_OF_FILE ARE SUPPORTED FOR
-- SEQUENTIAL FILES WITH ELEMENT_TYPE UNCONSTRAINED ARRAY.

-- THIS TEST IS NON-APPLICABLE IF THE INSTANTIATION OF SEQUENTIAL_IO
-- WITH UNCONSTRAINED ARRAY TYPE, ARR_UNCN, IS REJECTED.

-- IF I/O IS NOT SUPPORTED, THEN CREATE AND OPEN CAN RAISE USE_ERROR
-- OR NAME_ERROR. SEE (AI-00332).

-- ABW  8/17/82
-- SPS 9/15/82
-- SPS 11/9/82
-- JBG 1/6/83
-- JBG 6/4/84
-- TBN 11/01/85     RENAMED FROM CE2201D.DEP AND MODIFIED COMMENTS.
-- TBN 11/04/86     REVISED TEST TO OUTPUT A NON_APPLICABLE
--                  RESULT WHEN FILES ARE NOT SUPPORTED.

WITH REPORT;
USE REPORT;
WITH SEQUENTIAL_IO;

PROCEDURE EE2201D IS
     INCOMPLETE : EXCEPTION;
BEGIN

     TEST ("EE2201D" , "CHECK WHETHER READ, WRITE, AND END_OF_FILE " &
                       "ARE SUPPORTED FOR SEQUENTIAL FILES WITH " &
                       "UNCONSTRAINED ARRAY TYPES");

     DECLARE
          SUBTYPE ONE_TEN IS INTEGER RANGE 1..10;
          TYPE ARR_UNCN IS ARRAY (ONE_TEN RANGE <>) OF INTEGER;
-- THE FOLLOWING INSTANTIATION MAY BE REJECTED BY SOME IMPLEMENTATIONS.
          PACKAGE SEQ_ARR_UNCN IS NEW SEQUENTIAL_IO (ARR_UNCN);
          USE SEQ_ARR_UNCN;
          FILE_ARR_UNCN : FILE_TYPE;
          ARR2 : ARR_UNCN (1..6) := (1,3,5,7,9,0);
          ITEM_ARR2 : ARR_UNCN (1..6);
     BEGIN
          BEGIN
               CREATE (FILE_ARR_UNCN);

          EXCEPTION
               WHEN USE_ERROR =>
                    NOT_APPLICABLE ("USE_ERROR RAISED; SEQUENTIAL " &
                                    "CREATE");
                    RAISE INCOMPLETE;
               WHEN NAME_ERROR =>
                    NOT_APPLICABLE ("NAME_ERROR RAISED; SEQUENTIAL " &
                                    "CREATE");
                    RAISE INCOMPLETE;
               WHEN OTHERS =>
                    FAILED ("UNEXPECTED EXCEPTION RAISED; SEQUENTIAL " &
                            "CREATE");
                    RAISE INCOMPLETE;
          END;

          BEGIN
               WRITE (FILE_ARR_UNCN,ARR2);
               WRITE (FILE_ARR_UNCN, (0, -2));

          EXCEPTION
               WHEN OTHERS =>
                    FAILED ("WRITE FOR UNCONSTRAINED ARRAY");
          END;

          RESET (FILE_ARR_UNCN,IN_FILE);

          IF END_OF_FILE (FILE_ARR_UNCN) THEN
               FAILED ("WRONG END_OF_FILE VALUE FOR " &
                       "UNCONSTRAINED ARRAY");
          END IF;

          BEGIN
               READ (FILE_ARR_UNCN,ITEM_ARR2);

          EXCEPTION
               WHEN OTHERS =>
                    FAILED ("READ FOR UNCONSTRAINED ARRAY");
          END;

          IF ITEM_ARR2 /= (1,3,5,7,9,0) THEN
               FAILED ("READ WRONG VALUE - 1");
          END IF;

          BEGIN
               READ (FILE_ARR_UNCN, ITEM_ARR2(3..4));

               IF ITEM_ARR2 /= (1,3,0,-2,9,0) THEN
                    FAILED ("READ WRONG VALUE - 2");
               END IF;
          EXCEPTION
               WHEN OTHERS =>
                    FAILED ("EXCEPTION FOR SECOND ARRAY READ");
          END;

          IF NOT END_OF_FILE(FILE_ARR_UNCN) THEN
               FAILED ("NOT AT END OF FILE");
          END IF;

          CLOSE (FILE_ARR_UNCN);

     EXCEPTION
          WHEN USE_ERROR =>
               NOT_APPLICABLE ("USE_ERROR RAISED BY RESET");
     END;

     RESULT;

EXCEPTION
     WHEN INCOMPLETE =>
          RESULT;

END EE2201D;
