-- AD1B08A.DEP

-- OBJECTIVE:
--     CHECK THAT THE OCCURRENCE OF A TYPE NAME IN AN EXPRESSION IN A
--     PRAGMA, IS NOT A FORCING OCCURRENCE FOR THE TYPE.

-- APPLICABILITY CRITERIA:
--     THIS TEST IS APPLICABLE ONLY TO THOSE IMPLEMENTATIONS WHICH
--     SUPPORT SIZE CLAUSES.

--     IF SIZE CLAUSES ARE NOT SUPPORTED, THEN THE REPRESENTATION
--     CLAUSE FOR 'CHECK_SIZE' MUST BE REJECTED.

-- HISTORY:
--     DHH 08/29/88  CREATED ORIGINAL TEST.
--     DHH 02/08/89  ADDED CHECKS FOR CORRECT USE OF TYPE NAME IN A
--                   RECOGNIZED PRAGMA AND A CHECK FOR AN UNRECOGNIZED
--                   PRAGMA.

WITH REPORT; USE REPORT;
PROCEDURE AD1B08A IS

     CHECK : CONSTANT INTEGER := INTEGER'SIZE;

     TYPE CHECK_SIZE IS NEW INTEGER;

     FOR CHECK_SIZE'SIZE USE CHECK;                    --  N/A => ERROR.

BEGIN
     TEST ("AD1B08A", "CHECK THAT A SIZE CLAUSE FOR T IS LEGAL AFTER " &
                      "THE USE, IN AN EXPRESSION IN A PRAGMA " &
                      "ARGUMENT, OF: A SUBTYPE OF T; A RECORD OR " &
                      "ARRAY TYPE WITH A (SUB)COMPONENT OF A SUBTYPE " &
                      "OF T; AN ARRAY TYPE WITH INDEX SUBTYPE A " &
                      "SUBTYPE OF T");

     DECLARE
          TYPE T IS ACCESS INTEGER;
          PRAGMA CONTROLLED(T);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA SUPPRESS(OVERFLOW_CHECK, T);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA ELABORATE(T'LAST);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PROCEDURE P;
          PRAGMA INLINE(P, T(1024));
          FOR T'SIZE USE CHECK;
          PROCEDURE P IS
          BEGIN
               NULL;
          END;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PROCEDURE P;
          PRAGMA INTERFACE(P, (1 IN T));
          FOR T'SIZE USE CHECK;
          PROCEDURE P IS
          BEGIN
               NULL;
          END;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA LIST(T'(1024));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA MEMORY_SIZE(T(5));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA OPTIMIZE(T'(1024));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA PACK(T);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA PAGE(T(1024));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS RANGE 1 .. 5;
          TASK PRAGMA_PRIORITY IS
               PRAGMA PRIORITY(T'SIZE);
          END PRAGMA_PRIORITY;
          FOR T'SIZE USE CHECK;

          TASK BODY PRAGMA_PRIORITY IS
          BEGIN
               NULL;
          END PRAGMA_PRIORITY;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA SHARED(T'(1024));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA STORAGE_UNIT(T'SIZE);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA SUPPRESS(DIVISION_CHECK, T'(1024));
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA SYSTEM_NAME(T'LAST);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     DECLARE
          TYPE T IS NEW INTEGER;
          PRAGMA TOM_NORRIS(T'FIRST);
          FOR T'SIZE USE CHECK;
     BEGIN
          NULL;
     END;

     RESULT;
END AD1B08A;
